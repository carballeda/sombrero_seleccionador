"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var absent = new String("absent");

var Input = function () {
  _createClass(Input, null, [{
    key: "Address",
    value: function Address(signal) {
      if (signal.address == null) {
        signal.address = signal.receive.bind(signal);

        return signal.address;
      } else {
        return signal.address;
      }
    }
  }, {
    key: "notify",
    value: function notify(message, addressBook, from, to) {
      var exception = absent;
      try {
        while (from < to) {
          var address = addressBook[from];
          if (address != null) {
            address(message);
          }
          from = from + 1;
        }
      } catch (error) {
        exception = error;
      }

      if (from < to) {
        Input.notify(message, addressBook, from + 1, to);
      }

      if (exception != absent) {
        throw exception;
      }
    }
  }, {
    key: "connect",
    value: function connect(signal, address) {
      if (signal.addressBook == null) {
        signal.addressBook = [address];
      } else {
        var addressBook = signal.addressBook;
        if (addressBook.indexOf(address) < 0) {
          addressBook.push(address);
        }
      }
    }
  }]);

  function Input(value) {
    _classCallCheck(this, Input);

    this.value = value;
    this.isBlocked = false;

    this.addressBook = null;
    this.queue = null;
    this.address = null;
  }

  _createClass(Input, [{
    key: "receive",
    value: function receive(value) {
      if (this.isBlocked) {
        if (this.queue == null) {
          this.queue = [value];
        } else {
          this.queue.push(value);
        }
      } else {
        var exception = absent;
        this.isBlocked = true;
        try {
          this.value = value;

          if (this.addressBook != null) {
            var addressBook = this.addressBook;
            Input.notify(value, addressBook, 0, addressBook.length);
          }
        } catch (error) {
          exception = error;
        }

        this.isBlocked = false;
        if (this.queue != null && this.queue.length > 0) {
          this.receive(value = this.queue.shift());
        }

        if (exception != absent) {
          throw exception;
        }
      }
    }
  }, {
    key: "subscribe",
    value: function subscribe(address) {
      Input.connect(this, address);
      address(this.value);
    }
  }, {
    key: "connect",
    value: function connect(address) {
      if (this.addressBook == null) {
        this.addressBook = [address];
      } else {
        var addressBook = this.addressBook;
        if (addressBook.indexOf(address) < 0) {
          addressBook.push(address);
        }
      }
    }
  }]);

  return Input;
}();

Input.prototype.$type = "Signal.Signal";

var Inbox = function Inbox(message) {
  _classCallCheck(this, Inbox);

  this.signal = new Input(message);
  this.address = Input.Address(this.signal);
};

Inbox.prototype.$type = "Signal.Mailbox";

var mailbox = exports.mailbox = function mailbox(message) {
  return new Inbox(message);
};

var Forward = function Forward(address, tag) {
  var forward = function forward(message) {
    return address(tag(message));
  };
  forward.to = address;
  forward.tag = tag;
  return forward;
};

if (global['reflex/address'] == null) {
  global['reflex/address'] = 0;
}

var forward = exports.forward = function forward(address, tag) {
  var id = address.id != null ? address.id : address.id = global['reflex/address']++;
  var key = "reflex/address/" + id;

  return tag[key] || (tag[key] = Forward(address, tag));
};

var reductions = exports.reductions = function reductions(step, state, input) {
  var output = new Input(state);
  input.connect(forward(Input.Address(output), function (value) {
    return step(output.value, value);
  }));
  return output;
};

var map = exports.map = function map(f, input) {
  var output = new Input(f(input.value));
  input.connect(forward(Input.Address(output), f));
  return output;
};
//# sourceMappingURL=data:application/json;base64,