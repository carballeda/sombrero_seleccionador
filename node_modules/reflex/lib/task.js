'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Task = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _preemptiveAnimationFrame = require('./preemptive-animation-frame');

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Task = exports.Task = function () {
  _createClass(Task, null, [{
    key: 'create',
    value: function create(execute) {
      console.warn('Task.create is deprecated API use new Task instead');
      return new Task(execute);
    }
  }, {
    key: 'future',
    value: function future(request) {
      console.warn('Task.future is deprecated API use new Task instead');
      return new Future(request);
    }
  }, {
    key: 'succeed',
    value: function succeed(value) {
      return new Succeed(value);
    }
  }, {
    key: 'fail',
    value: function fail(error) {
      return new Fail(error);
    }
  }, {
    key: 'spawn',
    value: function spawn(task) {
      return new Spawn(task);
    }
  }, {
    key: 'sleep',
    value: function sleep(time) {
      return new Sleep(time);
    }
  }, {
    key: 'requestAnimationFrame',
    value: function requestAnimationFrame() {
      return new AnimationFrame();
    }
  }, {
    key: 'send',
    value: function send(address, message) {
      return new Send(address, message);
    }
  }, {
    key: 'fork',
    value: function fork(task, onSucceed, onFail) {
      return Process.fork(task, onSucceed, onFail);
    }
  }]);

  function Task(execute, cancel) {
    _classCallCheck(this, Task);

    if (execute != null) {
      this.fork = execute;
    }
    if (cancel != null) {
      this.abort = cancel;
    }
  }

  _createClass(Task, [{
    key: 'chain',
    value: function chain(next) {
      return new Chain(this, next);
    }
  }, {
    key: 'map',
    value: function map(f) {
      return new Map(this, f);
    }
  }, {
    key: 'capture',
    value: function capture(handle) {
      return new Capture(this, handle);
    }
  }, {
    key: 'format',
    value: function format(f) {
      return new Format(this, f);
    }
  }, {
    key: 'recover',
    value: function recover(regain) {
      return new Recover(this, regain);
    }
  }, {
    key: 'fork',
    value: function fork(succeed, fail) {}
  }, {
    key: 'abort',
    value: function abort(handle) {}
  }]);

  return Task;
}();

var Succeed = function (_Task) {
  _inherits(Succeed, _Task);

  function Succeed(value) {
    _classCallCheck(this, Succeed);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Succeed).call(this));

    _this.value = value;
    return _this;
  }

  _createClass(Succeed, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      succeed(this.value);
    }
  }]);

  return Succeed;
}(Task);

var Fail = function (_Task2) {
  _inherits(Fail, _Task2);

  function Fail(error) {
    _classCallCheck(this, Fail);

    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(Fail).call(this));

    _this2.error = error;
    return _this2;
  }

  _createClass(Fail, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      fail(this.error);
    }
  }]);

  return Fail;
}(Task);

var Sleep = function (_Task3) {
  _inherits(Sleep, _Task3);

  function Sleep(time) {
    _classCallCheck(this, Sleep);

    var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(Sleep).call(this));

    _this3.time = time;
    return _this3;
  }

  _createClass(Sleep, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      return setTimeout(succeed, this.time, void 0);
    }
  }, {
    key: 'abort',
    value: function abort(id) {
      clearTimeout(id);
    }
  }]);

  return Sleep;
}(Task);

var AnimationFrame = function (_Task4) {
  _inherits(AnimationFrame, _Task4);

  function AnimationFrame() {
    _classCallCheck(this, AnimationFrame);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(AnimationFrame).call(this));
  }

  _createClass(AnimationFrame, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      return (0, _preemptiveAnimationFrame.requestAnimationFrame)(succeed);
    }
  }, {
    key: 'abort',
    value: function abort(id) {
      (0, _preemptiveAnimationFrame.cancelAnimationFrame)(id);
    }
  }]);

  return AnimationFrame;
}(Task);

var threadID = 0;

var Spawn = function (_Task5) {
  _inherits(Spawn, _Task5);

  function Spawn(task) {
    _classCallCheck(this, Spawn);

    var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(Spawn).call(this));

    _this5.task = task;
    return _this5;
  }

  _createClass(Spawn, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      var _this6 = this;

      Promise.resolve(null).then(function (_) {
        return Task.fork(_this6.task, noop, noop);
      });

      succeed(++threadID);
    }
  }]);

  return Spawn;
}(Task);

var Send = function (_Task6) {
  _inherits(Send, _Task6);

  function Send(address, message) {
    _classCallCheck(this, Send);

    var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(Send).call(this));

    _this7.message = message;
    _this7.address = address;
    return _this7;
  }

  _createClass(Send, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      succeed(void this.address(this.message));
    }
  }]);

  return Send;
}(Task);

var Future = function (_Task7) {
  _inherits(Future, _Task7);

  function Future(request) {
    _classCallCheck(this, Future);

    var _this8 = _possibleConstructorReturn(this, Object.getPrototypeOf(Future).call(this));

    _this8.request = request;
    return _this8;
  }

  _createClass(Future, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      this.request().then(succeed, fail);
    }
  }]);

  return Future;
}(Task);

var Then = function (_Task8) {
  _inherits(Then, _Task8);

  function Then(task) {
    _classCallCheck(this, Then);

    var _this9 = _possibleConstructorReturn(this, Object.getPrototypeOf(Then).call(this));

    _this9.task = task;
    return _this9;
  }

  _createClass(Then, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      var _this10 = this;

      this.task.fork(function (value) {
        return void _this10.next(value).fork(succeed, fail);
      }, fail);
    }
  }]);

  return Then;
}(Task);

var Chain = function (_Then) {
  _inherits(Chain, _Then);

  function Chain(task, next) {
    _classCallCheck(this, Chain);

    var _this11 = _possibleConstructorReturn(this, Object.getPrototypeOf(Chain).call(this, task));

    _this11.next = next;
    return _this11;
  }

  return Chain;
}(Then);

var Map = function (_Then2) {
  _inherits(Map, _Then2);

  function Map(task, mapper) {
    _classCallCheck(this, Map);

    var _this12 = _possibleConstructorReturn(this, Object.getPrototypeOf(Map).call(this, task));

    _this12.mapper = mapper;
    return _this12;
  }

  _createClass(Map, [{
    key: 'next',
    value: function next(input) {
      return new Succeed(this.mapper(input));
    }
  }]);

  return Map;
}(Then);

var Catch = function (_Task9) {
  _inherits(Catch, _Task9);

  function Catch(task) {
    _classCallCheck(this, Catch);

    var _this13 = _possibleConstructorReturn(this, Object.getPrototypeOf(Catch).call(this));

    _this13.task = task;
    return _this13;
  }

  _createClass(Catch, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      var _this14 = this;

      this.task.fork(succeed, function (error) {
        return void _this14.handle(error).fork(succeed, fail);
      });
    }
  }]);

  return Catch;
}(Task);

var Capture = function (_Catch) {
  _inherits(Capture, _Catch);

  function Capture(task, handle) {
    _classCallCheck(this, Capture);

    var _this15 = _possibleConstructorReturn(this, Object.getPrototypeOf(Capture).call(this, task));

    _this15.handle = handle;
    return _this15;
  }

  return Capture;
}(Catch);

var Recover = function (_Catch2) {
  _inherits(Recover, _Catch2);

  function Recover(task, regain) {
    _classCallCheck(this, Recover);

    var _this16 = _possibleConstructorReturn(this, Object.getPrototypeOf(Recover).call(this, task));

    _this16.regain = regain;
    return _this16;
  }

  _createClass(Recover, [{
    key: 'handle',
    value: function handle(error) {
      return new Succeed(this.regain(error));
    }
  }]);

  return Recover;
}(Catch);

var Format = function (_Catch3) {
  _inherits(Format, _Catch3);

  function Format(task, formatter) {
    _classCallCheck(this, Format);

    var _this17 = _possibleConstructorReturn(this, Object.getPrototypeOf(Format).call(this, task));

    _this17.formatter = formatter;
    return _this17;
  }

  _createClass(Format, [{
    key: 'handle',
    value: function handle(error) {
      return new Fail(this.formatter(error));
    }
  }]);

  return Format;
}(Catch);

var noop = function noop() {
  return void 0;
};

var nextID = 0;

var Process = function () {
  _createClass(Process, null, [{
    key: 'fork',
    value: function fork(task, onSucceed, onFail) {
      var process = new Process(task);
      process.succeed = onSucceed;
      process.fail = onFail;
      process.schedule();
      return process;
    }
  }]);

  function Process(task) {
    _classCallCheck(this, Process);

    this.id = ++nextID;
    this.position = 0;
    this.root = task;
    this.stack = [];
    this.mailbox = [];
    this.abortHandle = null;
    this.isActive = true;
    this.isPending = false;
    this.success = null;
    this.failure = null;
    this.succeed = null;
    this.fail = null;
    this.onSucceed = this.onSucceed.bind(this);
    this.onFail = this.onFail.bind(this);
  }

  _createClass(Process, [{
    key: 'onSucceed',
    value: function onSucceed(value) {
      if (this.isPending) {
        this.isPending = false;
        this.abortHandle = null;

        if (this.success != null) {
          this.success.value = value;
        } else {
          this.success = new Succeed(value);
        }

        this.root = this.success;
        this.schedule();
      }
    }
  }, {
    key: 'onFail',
    value: function onFail(error) {
      if (this.isPending) {
        this.isPending = false;
        this.abortHandle = null;

        if (this.failure != null) {
          this.failure.error = error;
        } else {
          this.failure = new Fail(error);
        }

        this.root = this.failure;
        this.schedule();
      }
    }
  }, {
    key: 'kill',
    value: function kill(reason) {
      if (this.isActive) {
        this.isActive = false;
        if (this.root.abort) {
          this.root.abort(this.abortHandle);
        }
      }
    }
  }, {
    key: 'schedule',
    value: function schedule() {
      this.step();
    }
  }, {
    key: 'step',
    value: function step() {
      var process = this;
      while (process.isActive) {
        var task = process.root;
        if (task instanceof Succeed) {
          while (process.position < process.stack.length && process.stack[process.position] instanceof Catch) {
            process.position++;
          }

          if (process.position >= process.stack.length) {
            if (process.succeed != null) {
              process.succeed(task.value);
            }
            break;
          }

          var then = process.stack[process.position++];

          process.root = then.next(task.value);
          continue;
        }

        if (task instanceof Fail) {
          while (process.position < process.stack.length && process.stack[process.position] instanceof Then) {
            process.position++;
          }

          if (this.position >= process.stack.length) {
            if (process.fail != null) {
              process.fail(task.error);
            }
            break;
          }

          var _catch = process.stack[process.position++];

          process.root = _catch.handle(task.error);
          continue;
        }

        if (task instanceof Then) {
          if (process.position === 0) {
            process.stack.unshift(task);
          } else {
            process.stack[--process.position] = task;
          }

          process.root = task.task;

          continue;
        }

        if (task instanceof Catch) {
          if (process.position === 0) {
            process.stack.unshift(task);
          } else {
            process.stack[--process.position] = task;
          }

          process.root = task.task;

          continue;
        }

        if (task instanceof Task) {
          process.isPending = true;
          process.abortHandle = task.fork(process.onSucceed, process.onFail);
          break;
        }
      }
    }
  }]);

  return Process;
}();
//# sourceMappingURL=data:application/json;base64,