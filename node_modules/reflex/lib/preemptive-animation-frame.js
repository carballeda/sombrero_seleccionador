"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var NO_REQUEST = 0;
var PENDING_REQUEST = 1;
var EXTRA_REQUEST = 2;

var nextID = 0;
var state = NO_REQUEST;
var requests = [];
var ids = [];

var absent = new String("absent");

var requestAnimationFrame = exports.requestAnimationFrame = function requestAnimationFrame(request) {
  if (state === NO_REQUEST) {
    window.requestAnimationFrame(performAnimationFrame);
  }

  var id = ++nextID;
  requests.push(request);
  ids.push(id);
  state = PENDING_REQUEST;
  return id;
};

var cancelAnimationFrame = exports.cancelAnimationFrame = function cancelAnimationFrame(id) {
  var index = ids.indexOf(id);
  if (index >= 0) {
    ids.splice(index, 1);
    requests.splice(index, 1);
  }
};

var forceAnimationFrame = exports.forceAnimationFrame = function forceAnimationFrame() {
  var time = arguments.length <= 0 || arguments[0] === undefined ? window.performance.now() : arguments[0];
  return performAnimationFrame(time);
};

var performAnimationFrame = function performAnimationFrame(time) {
  switch (state) {
    case NO_REQUEST:
      throw Error("Unexpected frame request");
    case PENDING_REQUEST:
      window.requestAnimationFrame(performAnimationFrame);
      state = EXTRA_REQUEST;
      ids.splice(0);
      dispatchAnimationFrame(requests.splice(0), 0, time);
      break;
    case EXTRA_REQUEST:
      state = NO_REQUEST;
      break;
  }
};

var dispatchAnimationFrame = function dispatchAnimationFrame(requests, index, time) {
  var exception = absent;
  var count = requests.length;
  try {
    while (index < count) {
      var request = requests[index];
      index = index + 1;
      request(time);
    }
  } catch (error) {
    exception = error;
  }

  if (index < count) {
    dispatchAnimationFrame(requests, index, time);
  }

  if (exception != absent) {
    throw exception;
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcmVlbXB0aXZlLWFuaW1hdGlvbi1mcmFtZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFXQSxJQUFNLGFBQWEsQ0FBYjtBQUNOLElBQU0sa0JBQWtCLENBQWxCO0FBQ04sSUFBTSxnQkFBZ0IsQ0FBaEI7O0FBRU4sSUFBSSxTQUFvQixDQUFwQjtBQUNKLElBQUksUUFBa0IsVUFBbEI7QUFDSixJQUFJLFdBQXlDLEVBQXpDO0FBQ0osSUFBSSxNQUF3QixFQUF4Qjs7QUFFSixJQUFNLFNBQVMsSUFBSSxNQUFKLENBQVcsUUFBWCxDQUFUOztBQUVDLElBQU0sd0RBQ1gsU0FEVyxxQkFDWCxDQUFDLE9BQUQsRUFBa0M7QUFDaEMsTUFBSSxVQUFVLFVBQVYsRUFBc0I7QUFDeEIsV0FBTyxxQkFBUCxDQUE2QixxQkFBN0IsRUFEd0I7R0FBMUI7O0FBSUEsTUFBTSxLQUFLLEVBQUUsTUFBRixDQUxxQjtBQU1oQyxXQUFTLElBQVQsQ0FBYyxPQUFkLEVBTmdDO0FBT2hDLE1BQUksSUFBSixDQUFTLEVBQVQsRUFQZ0M7QUFRaEMsVUFBUSxlQUFSLENBUmdDO0FBU2hDLFNBQU8sRUFBUCxDQVRnQztDQUFsQzs7QUFZSyxJQUFNLHNEQUNYLFNBRFcsb0JBQ1gsQ0FBQyxFQUFELEVBQTRCO0FBQzFCLE1BQU0sUUFBUSxJQUFJLE9BQUosQ0FBWSxFQUFaLENBQVIsQ0FEb0I7QUFFMUIsTUFBSSxTQUFTLENBQVQsRUFBWTtBQUNkLFFBQUksTUFBSixDQUFXLEtBQVgsRUFBa0IsQ0FBbEIsRUFEYztBQUVkLGFBQVMsTUFBVCxDQUFnQixLQUFoQixFQUF1QixDQUF2QixFQUZjO0dBQWhCO0NBRkY7O0FBUUssSUFBTSxvREFDWCxTQURXLG1CQUNYO01BQUMsNkRBQWMsT0FBTyxXQUFQLENBQW1CLEdBQW5CO1NBQ2Ysc0JBQXNCLElBQXRCO0NBREE7O0FBR0YsSUFBTSx3QkFDSixTQURJLHFCQUNKLENBQUMsSUFBRCxFQUFtQjtBQUNqQixVQUFRLEtBQVI7QUFDRSxTQUFLLFVBQUw7QUFJRSxZQUFNLGlDQUFOLENBSkY7QUFERixTQU1PLGVBQUw7QUFLRSxhQUFPLHFCQUFQLENBQTZCLHFCQUE3QixFQUxGO0FBTUUsY0FBUSxhQUFSLENBTkY7QUFPRSxVQUFJLE1BQUosQ0FBVyxDQUFYLEVBUEY7QUFRRSw2QkFBdUIsU0FBUyxNQUFULENBQWdCLENBQWhCLENBQXZCLEVBQTJDLENBQTNDLEVBQThDLElBQTlDLEVBUkY7QUFTRSxZQVRGO0FBTkYsU0FnQk8sYUFBTDtBQUlFLGNBQVEsVUFBUixDQUpGO0FBS0UsWUFMRjtBQWhCRixHQURpQjtDQUFuQjs7QUEwQkYsSUFBTSx5QkFDSixTQURJLHNCQUNKLENBQUUsUUFBRixFQUNFLEtBREYsRUFFRSxJQUZGLEVBR0s7QUFDSCxNQUFJLFlBQVksTUFBWixDQUREO0FBRUgsTUFBTSxRQUFRLFNBQVMsTUFBVCxDQUZYO0FBR0gsTUFBSTtBQUNGLFdBQU8sUUFBUSxLQUFSLEVBQWU7QUFDcEIsVUFBTSxVQUFVLFNBQVMsS0FBVCxDQUFWLENBRGM7QUFFcEIsY0FBUSxRQUFRLENBQVIsQ0FGWTtBQUdwQixjQUFRLElBQVIsRUFIb0I7S0FBdEI7R0FERixDQU9BLE9BQU8sS0FBUCxFQUFjO0FBQ1osZ0JBQVksS0FBWixDQURZO0dBQWQ7O0FBSUEsTUFBSSxRQUFRLEtBQVIsRUFBZTtBQUNqQiwyQkFBdUIsUUFBdkIsRUFBaUMsS0FBakMsRUFBd0MsSUFBeEMsRUFEaUI7R0FBbkI7O0FBSUEsTUFBSSxhQUFhLE1BQWIsRUFBcUI7QUFDdkIsVUFBTSxTQUFOLENBRHVCO0dBQXpCO0NBckJGIiwiZmlsZSI6InByZWVtcHRpdmUtYW5pbWF0aW9uLWZyYW1lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuLyo6OlxudHlwZSBUaW1lID0gbnVtYmVyXG50eXBlIFN0YXRlID0gMCB8IDEgfCAyXG4qL1xuXG4vLyBJbnZhcmlhbnRzOlxuLy8gMS4gSW4gdGhlIE5PX1JFUVVFU1Qgc3RhdGUsIHRoZXJlIGlzIG5ldmVyIGEgc2NoZWR1bGVkIGFuaW1hdGlvbiBmcmFtZS5cbi8vIDIuIEluIHRoZSBQRU5ESU5HX1JFUVVFU1QgYW5kIEVYVFJBX1JFUVVFU1Qgc3RhdGVzLCB0aGVyZSBpcyBhbHdheXMgZXhhY3RseVxuLy8gb25lIHNjaGVkdWxlZCBhbmltYXRpb24gZnJhbWUuXG5jb25zdCBOT19SRVFVRVNUID0gMFxuY29uc3QgUEVORElOR19SRVFVRVNUID0gMVxuY29uc3QgRVhUUkFfUkVRVUVTVCA9IDJcblxubGV0IG5leHRJRC8qOm51bWJlciovID0gMFxubGV0IHN0YXRlLyo6U3RhdGUqLyA9IE5PX1JFUVVFU1RcbmxldCByZXF1ZXN0cy8qOkFycmF5PCh0aW1lOlRpbWUpID0+IGFueT4qLyA9IFtdXG5sZXQgaWRzLyo6QXJyYXk8bnVtYmVyPiovID0gW11cblxuY29uc3QgYWJzZW50ID0gbmV3IFN0cmluZyhcImFic2VudFwiKVxuXG5leHBvcnQgY29uc3QgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gLyo6OjxhPiovXG4gIChyZXF1ZXN0Lyo6KHRpbWU6VGltZSkgPT4gYSovKSA9PiB7XG4gICAgaWYgKHN0YXRlID09PSBOT19SRVFVRVNUKSB7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHBlcmZvcm1BbmltYXRpb25GcmFtZSlcbiAgICB9XG5cbiAgICBjb25zdCBpZCA9ICsrbmV4dElEXG4gICAgcmVxdWVzdHMucHVzaChyZXF1ZXN0KVxuICAgIGlkcy5wdXNoKGlkKVxuICAgIHN0YXRlID0gUEVORElOR19SRVFVRVNUXG4gICAgcmV0dXJuIGlkXG4gIH1cblxuZXhwb3J0IGNvbnN0IGNhbmNlbEFuaW1hdGlvbkZyYW1lID1cbiAgKGlkLyo6bnVtYmVyKi8pLyo6dm9pZCovID0+IHtcbiAgICBjb25zdCBpbmRleCA9IGlkcy5pbmRleE9mKGlkKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgaWRzLnNwbGljZShpbmRleCwgMSlcbiAgICAgIHJlcXVlc3RzLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH1cblxuZXhwb3J0IGNvbnN0IGZvcmNlQW5pbWF0aW9uRnJhbWUgPVxuICAodGltZS8qOlRpbWUqLz13aW5kb3cucGVyZm9ybWFuY2Uubm93KCkpID0+XG4gIHBlcmZvcm1BbmltYXRpb25GcmFtZSh0aW1lKTtcblxuY29uc3QgcGVyZm9ybUFuaW1hdGlvbkZyYW1lID1cbiAgKHRpbWUvKjpUaW1lKi8pID0+IHtcbiAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICBjYXNlIE5PX1JFUVVFU1Q6XG4gICAgICAgIC8vIFRoaXMgc3RhdGUgc2hvdWxkIG5vdCBiZSBwb3NzaWJsZS4gSG93IGNhbiB0aGVyZSBiZSBub1xuICAgICAgICAvLyByZXF1ZXN0LCB5ZXQgc29tZWhvdyB3ZSBhcmUgYWN0aXZlbHkgZnVsZmlsbGluZyBhXG4gICAgICAgIC8vIHJlcXVlc3Q/XG4gICAgICAgIHRocm93IEVycm9yKGBVbmV4cGVjdGVkIGZyYW1lIHJlcXVlc3RgKVxuICAgICAgY2FzZSBQRU5ESU5HX1JFUVVFU1Q6XG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIGRvIG5vdCAqa25vdyogdGhhdCBhbm90aGVyIGZyYW1lIGlzXG4gICAgICAgIC8vIG5lZWRlZCwgYnV0IHdlIG1ha2UgYW4gZXh0cmEgZnJhbWUgcmVxdWVzdCBqdXN0IGluXG4gICAgICAgIC8vIGNhc2UuIEl0J3MgcG9zc2libGUgdG8gZHJvcCBhIGZyYW1lIGlmIGZyYW1lIGlzIHJlcXVlc3RlZFxuICAgICAgICAvLyB0b28gbGF0ZSwgc28gd2UganVzdCBkbyBpdCBwcmVlbXB0aXZlbHkuXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocGVyZm9ybUFuaW1hdGlvbkZyYW1lKVxuICAgICAgICBzdGF0ZSA9IEVYVFJBX1JFUVVFU1RcbiAgICAgICAgaWRzLnNwbGljZSgwKVxuICAgICAgICBkaXNwYXRjaEFuaW1hdGlvbkZyYW1lKHJlcXVlc3RzLnNwbGljZSgwKSwgMCwgdGltZSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgRVhUUkFfUkVRVUVTVDpcbiAgICAgICAgLy8gVHVybnMgb3V0IHRoZSBleHRyYSByZXF1ZXN0IHdhcyBub3QgbmVlZGVkLCBzbyB3ZSB3aWxsXG4gICAgICAgIC8vIHN0b3AgcmVxdWVzdGluZy4gTm8gcmVhc29uIHRvIGNhbGwgaXQgYWxsIHRoZSB0aW1lIGlmXG4gICAgICAgIC8vIG5vIG9uZSBuZWVkcyBpdC5cbiAgICAgICAgc3RhdGUgPSBOT19SRVFVRVNUXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbmNvbnN0IGRpc3BhdGNoQW5pbWF0aW9uRnJhbWUgPSAvKjo6PGE+Ki9cbiAgKCByZXF1ZXN0cy8qOkFycmF5PCh0aW1lOlRpbWUpID0+IGE+Ki9cbiAgLCBpbmRleC8qOm51bWJlciovXG4gICwgdGltZS8qOlRpbWUqL1xuICApID0+IHtcbiAgICBsZXQgZXhjZXB0aW9uID0gYWJzZW50XG4gICAgY29uc3QgY291bnQgPSByZXF1ZXN0cy5sZW5ndGhcbiAgICB0cnkge1xuICAgICAgd2hpbGUgKGluZGV4IDwgY291bnQpIHtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHJlcXVlc3RzW2luZGV4XVxuICAgICAgICBpbmRleCA9IGluZGV4ICsgMVxuICAgICAgICByZXF1ZXN0KHRpbWUpXG4gICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgZXhjZXB0aW9uID0gZXJyb3JcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPCBjb3VudCkge1xuICAgICAgZGlzcGF0Y2hBbmltYXRpb25GcmFtZShyZXF1ZXN0cywgaW5kZXgsIHRpbWUpXG4gICAgfVxuXG4gICAgaWYgKGV4Y2VwdGlvbiAhPSBhYnNlbnQpIHtcbiAgICAgIHRocm93IGV4Y2VwdGlvblxuICAgIH1cbiAgfVxuIl19