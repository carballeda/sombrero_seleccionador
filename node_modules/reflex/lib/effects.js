'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Effects = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _task2 = require('./task');

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var raise = function raise(error) {
  throw Error('Effects should be created from task that never fail but it did fail with error ' + error);
};

var ignore = function ignore(_) {
  return void 0;
};

var nil = _task2.Task.succeed(void 0);

var never = new _task2.Task(function (succeed, fail) {
  return void 0;
});

var Effects = function () {
  function Effects() {
    _classCallCheck(this, Effects);
  }

  _createClass(Effects, null, [{
    key: 'task',
    value: function task(_task) {
      console.warn('Effects.task is deprecated please use Effects.perform instead');
      return new Perform(_task);
    }
  }, {
    key: 'perform',
    value: function perform(task) {
      return new Perform(task);
    }
  }, {
    key: 'tick',
    value: function tick(tag) {
      console.warn('Effects.tick is deprecated please use Effects.perform(Task.requestAnimationFrame().map(tag)) instead');
      return new Perform(_task2.Task.requestAnimationFrame().map(tag));
    }
  }, {
    key: 'receive',
    value: function receive(action) {
      var fx = new Perform(new _task2.Task(function (succeed, fail) {
        return void Promise.resolve(action).then(succeed, fail);
      }));
      return fx;
    }
  }, {
    key: 'batch',
    value: function batch(effects) {
      return new Batch(effects);
    }
  }, {
    key: 'driver',
    value: function driver(address) {
      return function (fx) {
        if (!(fx instanceof None)) {
          _task2.Task.fork(fx.send(address), ignore, raise);
        }
      };
    }
  }]);

  return Effects;
}();

exports.Effects = Effects;

var Perform = function (_Effects) {
  _inherits(Perform, _Effects);

  function Perform(task) {
    _classCallCheck(this, Perform);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Perform).call(this));

    _this.task = task;
    return _this;
  }

  _createClass(Perform, [{
    key: 'map',
    value: function map(f) {
      return new Perform(this.task.map(f));
    }
  }, {
    key: 'send',
    value: function send(address) {
      return this.task.chain(function (value) {
        return _task2.Task.send(address, value);
      });
    }
  }]);

  return Perform;
}(Effects);

var None = function (_Effects2) {
  _inherits(None, _Effects2);

  function None() {
    _classCallCheck(this, None);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(None).apply(this, arguments));
  }

  _createClass(None, [{
    key: 'map',
    value: function map(f) {
      return Effects.none;
    }
  }, {
    key: 'send',
    value: function send(address) {
      return nil;
    }
  }]);

  return None;
}(Effects);

Effects.none = new None();

var Batch = function (_Effects3) {
  _inherits(Batch, _Effects3);

  function Batch(effects) {
    _classCallCheck(this, Batch);

    var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(Batch).call(this));

    _this3.effects = effects;
    return _this3;
  }

  _createClass(Batch, [{
    key: 'map',
    value: function map(f) {
      return new Batch(this.effects.map(function (effect) {
        return effect.map(f);
      }));
    }
  }, {
    key: 'send',
    value: function send(address) {
      var _this4 = this;

      return new _task2.Task(function (succeed, fail) {
        var effects = _this4.effects;

        var count = effects.length;
        var index = 0;
        while (index < count) {
          var effect = effects[index];
          if (!(effect instanceof None)) {
            _task2.Task.fork(effect.send(address), ignore, raise);
          }

          index = index + 1;
        }
        succeed(void 0);
      });
    }
  }]);

  return Batch;
}(Effects);
//# sourceMappingURL=data:application/json;base64,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QVEsTUFBUixDQUZtQjtBQUdqQyxZQUFJLFFBQVEsQ0FBUixDQUg2QjtBQUlqQyxlQUFPLFFBQVEsS0FBUixFQUFlO0FBQ3BCLGNBQU0sU0FBUyxRQUFRLEtBQVIsQ0FBVCxDQURjO0FBRXBCLGNBQUksRUFBRSxrQkFBa0IsSUFBbEIsQ0FBRixFQUEyQjtBQUM3Qix3QkFBSyxJQUFMLENBQVUsT0FBTyxJQUFQLENBQVksT0FBWixDQUFWLEVBQWdDLE1BQWhDLEVBQXdDLEtBQXhDLEVBRDZCO1dBQS9COztBQUlBLGtCQUFRLFFBQVEsQ0FBUixDQU5ZO1NBQXRCO0FBUUEsZ0JBQVEsS0FBSyxDQUFMLENBQVIsQ0FaaUM7T0FBbkIsQ0FBaEIsQ0FEaUQ7Ozs7U0FYL0M7RUFBd0IiLCJmaWxlIjoiZWZmZWN0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCB7VGFza30gZnJvbSBcIi4vdGFza1wiXG5cbi8qOjpcbmltcG9ydCB0eXBlIHtOZXZlcn0gZnJvbSBcIi4vZWZmZWN0c1wiXG5pbXBvcnQgdHlwZSB7QWRkcmVzc30gZnJvbSBcIi4vc2lnbmFsXCJcbiovXG5cbmNvbnN0IHJhaXNlID1cbiAgZXJyb3IgPT4ge1xuICAgIHRocm93IEVycm9yKGBFZmZlY3RzIHNob3VsZCBiZSBjcmVhdGVkIGZyb20gdGFzayB0aGF0IG5ldmVyIGZhaWwgYnV0IGl0IGRpZCBmYWlsIHdpdGggZXJyb3IgJHtlcnJvcn1gKVxuICB9XG5cbmNvbnN0IGlnbm9yZSA9XG4gIF8gPT5cbiAgdm9pZCgwKVxuXG5jb25zdCBuaWwgPVxuICBUYXNrLnN1Y2NlZWQodm9pZCgwKSlcblxuY29uc3QgbmV2ZXIgPVxuICBuZXcgVGFzaygoc3VjY2VlZCwgZmFpbCkgPT4gdm9pZCgwKSlcblxuZXhwb3J0IGNsYXNzIEVmZmVjdHMgLyo6OjxhPiovIHtcbiAgc3RhdGljIHRhc2sgLyo6OjxhPiovKHRhc2svKjpUYXNrPE5ldmVyLCBhPiovKS8qOkVmZmVjdHM8YT4qLyB7XG4gICAgY29uc29sZS53YXJuKCdFZmZlY3RzLnRhc2sgaXMgZGVwcmVjYXRlZCBwbGVhc2UgdXNlIEVmZmVjdHMucGVyZm9ybSBpbnN0ZWFkJylcbiAgICByZXR1cm4gbmV3IFBlcmZvcm0odGFzaylcbiAgfVxuICBzdGF0aWMgcGVyZm9ybSAvKjo6PGE+Ki8odGFzay8qOlRhc2s8TmV2ZXIsIGE+Ki8pLyo6RWZmZWN0czxhPiovIHtcbiAgICByZXR1cm4gbmV3IFBlcmZvcm0odGFzaylcbiAgfVxuICBzdGF0aWMgdGljayAvKjo6PGE+Ki8odGFnLyo6KHRpbWU6bnVtYmVyKSA9PiBhKi8pLyo6RWZmZWN0czxhPiovIHtcbiAgICBjb25zb2xlLndhcm4oJ0VmZmVjdHMudGljayBpcyBkZXByZWNhdGVkIHBsZWFzZSB1c2UgRWZmZWN0cy5wZXJmb3JtKFRhc2sucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkubWFwKHRhZykpIGluc3RlYWQnKVxuICAgIHJldHVybiBuZXcgUGVyZm9ybShUYXNrLnJlcXVlc3RBbmltYXRpb25GcmFtZSgpLm1hcCh0YWcpKVxuICB9XG4gIHN0YXRpYyByZWNlaXZlIC8qOjo8YT4qLyhhY3Rpb24vKjphKi8pLyo6RWZmZWN0czxhPiovIHtcbiAgICBjb25zdCBmeCA9XG4gICAgICBuZXcgUGVyZm9ybVxuICAgICAgKCBuZXcgVGFza1xuICAgICAgICAoIChzdWNjZWVkLCBmYWlsKSA9PlxuICAgICAgICAgIHZvaWRcbiAgICAgICAgICAoIFByb21pc2VcbiAgICAgICAgICAgIC5yZXNvbHZlKGFjdGlvbilcbiAgICAgICAgICAgIC50aGVuKHN1Y2NlZWQsIGZhaWwpXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApXG4gICAgcmV0dXJuIGZ4XG4gIH1cbiAgc3RhdGljIGJhdGNoIC8qOjo8YT4qLyhlZmZlY3RzLyo6QXJyYXk8RWZmZWN0czxhPj4qLykvKjpFZmZlY3RzPGE+Ki8ge1xuICAgIHJldHVybiBuZXcgQmF0Y2goZWZmZWN0cylcbiAgfVxuICBzdGF0aWMgZHJpdmVyIC8qOjo8YT4qLyhhZGRyZXNzLyo6QWRkcmVzczxhPiovKS8qOihmeDpFZmZlY3RzPGE+KSA9PiB2b2lkKi8ge1xuICAgIHJldHVybiBmeCA9PiB7XG4gICAgICBpZiAoIShmeCBpbnN0YW5jZW9mIE5vbmUpKSB7XG4gICAgICAgIFRhc2suZm9yayhmeC5zZW5kKGFkZHJlc3MpLCBpZ25vcmUsIHJhaXNlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKjo6XG4gIHN0YXRpYyBub25lOkVmZmVjdHM8YW55PjtcbiAgdGFzazogVGFzazxOZXZlciwgYT47XG4gIG1hcDogPGI+IChmOihhOmEpPT5iKSA9PiBFZmZlY3RzPGI+O1xuICBzZW5kOiAoYWRkcmVzczpBZGRyZXNzPGE+KSA9PiBUYXNrPE5ldmVyLCB2b2lkPjtcbiAgKi9cbn1cblxuY2xhc3MgUGVyZm9ybSAvKjo6PGE+Ki8gZXh0ZW5kcyBFZmZlY3RzIC8qOjo8YT4qLyB7XG4gIGNvbnN0cnVjdG9yKHRhc2svKjpUYXNrPE5ldmVyLCBhPiovKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMudGFzayA9IHRhc2tcbiAgfVxuICBtYXAgLyo6OjxiPiovIChmLyo6KGE6YSk9PmIqLykvKjpFZmZlY3RzPGI+Ki8ge1xuICAgIHJldHVybiBuZXcgUGVyZm9ybSh0aGlzLnRhc2subWFwKGYpKVxuICB9XG4gIHNlbmQoYWRkcmVzcy8qOkFkZHJlc3M8YT4qLykvKjpUYXNrPE5ldmVyLCB2b2lkPiovIHtcbiAgICByZXR1cm4gdGhpcy50YXNrLmNoYWluKHZhbHVlID0+IFRhc2suc2VuZChhZGRyZXNzLCB2YWx1ZSkpXG4gIH1cbn1cblxuY2xhc3MgTm9uZSAvKjo6PGE+Ki8gZXh0ZW5kcyBFZmZlY3RzIC8qOjo8YW55PiovIHtcbiAgbWFwLyo6OjxiPiovKGYvKjooYTphKT0+YiovKS8qOkVmZmVjdHM8Yj4qLyB7XG4gICAgcmV0dXJuIEVmZmVjdHMubm9uZVxuICB9XG4gIHNlbmQoYWRkcmVzcy8qOkFkZHJlc3M8YT4qLykvKjpUYXNrPE5ldmVyLCB2b2lkPiovIHtcbiAgICByZXR1cm4gbmlsXG4gIH1cbn1cbkVmZmVjdHMubm9uZSA9IG5ldyBOb25lKClcblxuY2xhc3MgQmF0Y2ggLyo6OjxhPiovIGV4dGVuZHMgRWZmZWN0cyAvKjo6PGE+Ki8ge1xuICAvKjo6XG4gIGVmZmVjdHM6IEFycmF5PEVmZmVjdHM8YT4+O1xuICAqL1xuICBjb25zdHJ1Y3RvcihlZmZlY3RzLyo6QXJyYXk8RWZmZWN0czxhPj4qLykge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLmVmZmVjdHMgPSBlZmZlY3RzXG4gIH1cbiAgbWFwLyo6OjxiPiovKGYvKjooYTphKT0+YiovKS8qOkVmZmVjdHM8Yj4qLyB7XG4gICAgcmV0dXJuIG5ldyBCYXRjaCh0aGlzLmVmZmVjdHMubWFwKGVmZmVjdCA9PiBlZmZlY3QubWFwKGYpKSlcbiAgfVxuICBzZW5kKGFkZHJlc3MvKjpBZGRyZXNzPGE+Ki8pLyo6VGFzazxOZXZlciwgdm9pZD4qLyB7XG4gICAgcmV0dXJuIG5ldyBUYXNrKChzdWNjZWVkLCBmYWlsKSA9PiB7XG4gICAgICBjb25zdCB7ZWZmZWN0c30gPSB0aGlzXG4gICAgICBjb25zdCBjb3VudCA9IGVmZmVjdHMubGVuZ3RoXG4gICAgICBsZXQgaW5kZXggPSAwXG4gICAgICB3aGlsZSAoaW5kZXggPCBjb3VudCkge1xuICAgICAgICBjb25zdCBlZmZlY3QgPSBlZmZlY3RzW2luZGV4XVxuICAgICAgICBpZiAoIShlZmZlY3QgaW5zdGFuY2VvZiBOb25lKSkge1xuICAgICAgICAgIFRhc2suZm9yayhlZmZlY3Quc2VuZChhZGRyZXNzKSwgaWdub3JlLCByYWlzZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGluZGV4ID0gaW5kZXggKyAxXG4gICAgICB9XG4gICAgICBzdWNjZWVkKHZvaWQoMCkpXG4gICAgfSlcbiAgfVxufVxuIl19