(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./task", "./signal", "./effects", "./dom"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./task"), require("./signal"), require("./effects"), require("./dom"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.task, global.signal, global.effects, global.dom);
    global.application = mod.exports;
  }
})(this, function (exports, _task, _signal, _effects, _dom) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.start = exports.beginner = undefined;

  var _slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  var first = function first(xs) {
    return xs[0];
  };
  var second = function second(xs) {
    return xs[1];
  };

  var beginner = exports.beginner = function beginner(configuration) {
    return { flags: void 0,
      init: function init(_) {
        return [configuration.model, _effects.Effects.none];
      },
      update: function update(model, action) {
        return [configuration.update(model, action), _effects.Effects.none];
      },
      view: configuration.view
    };
  };

  var start = exports.start = function start(configuration) {
    var init = configuration.init;
    var view = configuration.view;
    var update = configuration.update;
    var flags = configuration.flags;

    var _mailbox = (0, _signal.mailbox)({});

    var address = _mailbox.address;
    var signal = _mailbox.signal;

    var step = function step(_ref, action) {
      var _ref2 = _slicedToArray(_ref, 2);

      var model = _ref2[0];
      var _ = _ref2[1];
      return update(model, action);
    };

    var display = function display(model) {
      return (0, _dom.root)(view, model, address);
    };

    var steps = (0, _signal.reductions)(step, init(flags), signal);

    var model = (0, _signal.map)(first, steps);
    var application = { address: address,
      model: model,
      task: (0, _signal.map)(second, steps),
      view: (0, _signal.map)(display, model)
    };

    return application;
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcGxpY2F0aW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFZQSxNQUFNLFFBQXFCLFNBQXJCLEtBQXFCLENBQUMsRUFBRDtXQUF5QixHQUFHLENBQUg7R0FBekI7QUFDM0IsTUFBTSxTQUFzQixTQUF0QixNQUFzQixDQUFDLEVBQUQ7V0FBeUIsR0FBRyxDQUFIO0dBQXpCOztBQUdyQixNQUFNLDhCQUNYLFNBRFcsUUFDWCxDQUFDLGFBQUQ7V0FDRSxFQUFFLE9BQU8sS0FBSyxDQUFMO0FBQ1AsWUFBTTtlQUNOLENBQUUsY0FBYyxLQUFkLEVBQ0EsaUJBQVEsSUFBUjtPQUZJO0FBSU4sY0FBUSxnQkFBQyxLQUFELEVBQVEsTUFBUjtlQUNSLENBQUUsY0FBYyxNQUFkLENBQXFCLEtBQXJCLEVBQTRCLE1BQTVCLENBQUYsRUFDRSxpQkFBUSxJQUFSO09BRk07QUFJUixZQUFNLGNBQWMsSUFBZDs7R0FWVjs7QUFjSyxNQUFNLHdCQUNYLFNBRFcsS0FDWCxDQUFDLGFBQUQsRUFBa0c7UUFDekYsT0FBNkIsY0FBN0IsS0FEeUY7UUFDbkYsT0FBdUIsY0FBdkIsS0FEbUY7UUFDN0UsU0FBaUIsY0FBakIsT0FENkU7UUFDckUsUUFBUyxjQUFULE1BRHFFOzttQkFRdEUscUJBQVMsRUFBVCxFQVJzRTs7UUFRekYsMkJBUnlGO1FBUWhGLHlCQVJnRjs7QUFTaEcsUUFBTSxPQUNKLFNBREksSUFDSixPQUNFLE1BREY7OztVQUFHO1VBQU87YUFHVixPQUFPLEtBQVAsRUFBYyxNQUFkO0tBSEEsQ0FWOEY7O0FBZWhHLFFBQU0sVUFDSixTQURJLE9BQ0osQ0FBQyxLQUFEO2FBQ0EsZUFBSyxJQUFMLEVBQVcsS0FBWCxFQUFrQixPQUFsQjtLQURBLENBaEI4Rjs7QUFtQmhHLFFBQU0sUUFDSix3QkFBVyxJQUFYLEVBQWlCLEtBQUssS0FBTCxDQUFqQixFQUE4QixNQUE5QixDQURJLENBbkIwRjs7QUFzQmhHLFFBQU0sUUFBUSxpQkFBSSxLQUFKLEVBQVcsS0FBWCxDQUFSLENBdEIwRjtBQXVCaEcsUUFBTSxjQUNKLEVBQUUsZ0JBQUY7QUFDRSxrQkFERjtBQUVFLFlBQU0saUJBQUksTUFBSixFQUFZLEtBQVosQ0FBTjtBQUNBLFlBQU0saUJBQUksT0FBSixFQUFhLEtBQWIsQ0FBTjtLQUpFLENBdkIwRjs7QUE4QmhHLFdBQU8sV0FBUCxDQTlCZ0c7R0FBbEciLCJmaWxlIjoiYXBwbGljYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQge1Rhc2t9IGZyb20gXCIuL3Rhc2tcIlxuaW1wb3J0IHttYWlsYm94LCBtYXAsIHJlZHVjdGlvbnN9IGZyb20gXCIuL3NpZ25hbFwiXG5pbXBvcnQge0VmZmVjdHN9IGZyb20gXCIuL2VmZmVjdHNcIlxuaW1wb3J0IHtyb290fSBmcm9tIFwiLi9kb21cIlxuXG4vKjo6XG5pbXBvcnQgdHlwZSB7TWFpbGJveCwgU2lnbmFsfSBmcm9tIFwiLi9zaWduYWxcIlxuaW1wb3J0IHR5cGUge0JlZ2lubmVyQ29uZmlndXJhdGlvbiwgQWR2YW5jZWRDb25maWd1cmF0aW9uLCBBcHBsaWNhdGlvbn0gZnJvbSBcIi4vYXBwbGljYXRpb25cIlxuKi9cblxuY29uc3QgZmlyc3QgPSAvKjo6PGEsIGI+Ki8gKHhzLyo6W2EsIGJdKi8pLyo6YSovID0+IHhzWzBdXG5jb25zdCBzZWNvbmQgPSAvKjo6PGEsIGI+Ki8gKHhzLyo6W2EsIGJdKi8pLyo6YiovID0+IHhzWzFdXG5cblxuZXhwb3J0IGNvbnN0IGJlZ2lubmVyID0gLyo6Ojxtb2RlbCwgYWN0aW9uPiovXG4gIChjb25maWd1cmF0aW9uLyo6QmVnaW5uZXJDb25maWd1cmF0aW9uPG1vZGVsLCBhY3Rpb24+Ki8pLyo6QWR2YW5jZWRDb25maWd1cmF0aW9uPG1vZGVsLCBhY3Rpb24sIHZvaWQ+Ki8gPT5cbiAgKCB7IGZsYWdzOiB2b2lkKDApXG4gICAgLCBpbml0OiBfID0+XG4gICAgICBbIGNvbmZpZ3VyYXRpb24ubW9kZWxcbiAgICAgICwgRWZmZWN0cy5ub25lXG4gICAgICBdXG4gICAgLCB1cGRhdGU6IChtb2RlbCwgYWN0aW9uKSA9PlxuICAgICAgWyBjb25maWd1cmF0aW9uLnVwZGF0ZShtb2RlbCwgYWN0aW9uKVxuICAgICAgLCBFZmZlY3RzLm5vbmVcbiAgICAgIF1cbiAgICAsIHZpZXc6IGNvbmZpZ3VyYXRpb24udmlld1xuICAgIH1cbiAgKVxuXG5leHBvcnQgY29uc3Qgc3RhcnQgPSAvKjo6PG1vZGVsLCBhY3Rpb24sIGZsYWdzPiovXG4gIChjb25maWd1cmF0aW9uLyo6QWR2YW5jZWRDb25maWd1cmF0aW9uPG1vZGVsLCBhY3Rpb24sIGZsYWdzPiovKS8qOkFwcGxpY2F0aW9uPG1vZGVsLCBhY3Rpb24+Ki8gPT4ge1xuICAgIGNvbnN0IHtpbml0LCB2aWV3LCB1cGRhdGUsIGZsYWdzfSA9IGNvbmZpZ3VyYXRpb25cbiAgICAvLyBXZSBkb24ndCBoYXZlIGEgdmFsdWUgb2YgYGFjdGlvbmAgdHlwZSB0aGVyZSBmb3Igd2UgY2FuIG5vdFxuICAgIC8vIGNyZWF0ZSBhIGBNYWlsYm94PGFjdGlvbj5gLiBFbG0gd29ya3MgYXJvdW5kIHRoYXQgYnkgZGVmaW5pbmdcbiAgICAvLyBNYWlsYm94PEFycmF5PGFjdGlvbj4+IGFuZCBzdGFydHMgd2l0aCBgW11gLCBidXQgYm94aW5nIGV2ZXJ5IGFjdGlvblxuICAgIC8vIGlzIGhhcmQgdG8ganVzdGlmeSBqdXN0IHRvIG1ha2UgdHlwZSBzeXN0ZW0gaGFwcHkuIFNvIGluc3RlYWQgd2UganVzdFxuICAgIC8vIHN0YXJ0IHdpdGggYG51bGxgLlxuICAgIC8vIEBGbG93SWdub3JlOlxuICAgIGNvbnN0IHthZGRyZXNzLCBzaWduYWx9ID0gbWFpbGJveCgoe30vKjphY3Rpb24qLykpXG4gICAgY29uc3Qgc3RlcCA9XG4gICAgICAoIFttb2RlbCwgX11cbiAgICAgICwgYWN0aW9uXG4gICAgICApID0+XG4gICAgICB1cGRhdGUobW9kZWwsIGFjdGlvbilcblxuICAgIGNvbnN0IGRpc3BsYXkgPVxuICAgICAgKG1vZGVsKSA9PlxuICAgICAgcm9vdCh2aWV3LCBtb2RlbCwgYWRkcmVzcylcblxuICAgIGNvbnN0IHN0ZXBzID1cbiAgICAgIHJlZHVjdGlvbnMoc3RlcCwgaW5pdChmbGFncyksIHNpZ25hbClcblxuICAgIGNvbnN0IG1vZGVsID0gbWFwKGZpcnN0LCBzdGVwcylcbiAgICBjb25zdCBhcHBsaWNhdGlvbiA9XG4gICAgICB7IGFkZHJlc3NcbiAgICAgICwgbW9kZWxcbiAgICAgICwgdGFzazogbWFwKHNlY29uZCwgc3RlcHMpXG4gICAgICAsIHZpZXc6IG1hcChkaXNwbGF5LCBtb2RlbClcbiAgICAgIH1cblxuICAgIHJldHVybiBhcHBsaWNhdGlvblxuICB9XG4iXX0=
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.dom = mod.exports;
  }
})(this, function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var driver = null;
  var absent = new String("absent");

  var VirtualRoot = function () {
    function VirtualRoot(view, model, address) {
      _classCallCheck(this, VirtualRoot);

      this.view = view;
      this.model = model;
      this.address = address;
    }

    _createClass(VirtualRoot, [{
      key: "renderWith",
      value: function renderWith(current) {
        var exception = absent;
        var previous = driver;
        driver = current;

        try {
          driver.render(this.view(this.model, this.address));
        } catch (error) {
          exception = error;
        }

        driver = previous;

        if (exception != absent) {
          throw exception;
        }
      }
    }]);

    return VirtualRoot;
  }();

  VirtualRoot.prototype.$type = "VirtualRoot";

  var LazyNode = exports.LazyNode = function () {
    function LazyNode(tagName, properties, children) {
      _classCallCheck(this, LazyNode);

      this.tagName = tagName;
      this.properties = properties;
      this.children = children;
      this.key = properties == null ? null : properties.key;
    }

    _createClass(LazyNode, [{
      key: "force",
      value: function force() {
        if (driver == null) {
          throw TypeError('LazyTree may only be forced from with in the Root.renderWith(driver) call');
        }

        return driver.node(this.tagName, this.properties, this.children);
      }
    }]);

    return LazyNode;
  }();

  LazyNode.prototype.$type = "LazyTree";

  var LazyThunk = function () {
    function LazyThunk(key, view, args) {
      _classCallCheck(this, LazyThunk);

      this.key = key;
      this.view = view;
      this.args = args;
    }

    _createClass(LazyThunk, [{
      key: "force",
      value: function force() {
        var _driver;

        if (driver == null) {
          throw TypeError('LazyTree may only be forced from with in the Root.renderWith(driver) call');
        }

        return (_driver = driver).thunk.apply(_driver, [this.key, this.view].concat(_toConsumableArray(this.args)));
      }
    }]);

    return LazyThunk;
  }();

  LazyThunk.prototype.$type = "LazyTree";

  var root = exports.root = function root(view, model, address) {
    return new VirtualRoot(view, model, address);
  };

  var text = exports.text = function text(content) {
    return driver == null ? content : driver.text == null ? content : driver.text(content);
  };

  var node = exports.node = function node(tagName, properties, children) {
    return driver == null ? new LazyNode(tagName, properties, children) : driver.node(tagName, properties, children);
  };

  var thunk = exports.thunk = function thunk(key, view) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    var _driver2;

    return driver == null ? new LazyThunk(key, view, args) : (_driver2 = driver).thunk.apply(_driver2, [key, view].concat(args));
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVdBLE1BQUksU0FBcUIsSUFBckI7QUFDSixNQUFNLFNBQVMsSUFBSSxNQUFKLENBQVcsUUFBWCxDQUFUOztNQUVBO0FBUUosYUFSSSxXQVFKLENBQ0UsSUFERixFQUVFLEtBRkYsRUFHRSxPQUhGLEVBSUU7NEJBWkUsYUFZRjs7QUFDQSxXQUFLLElBQUwsR0FBWSxJQUFaLENBREE7QUFFQSxXQUFLLEtBQUwsR0FBYSxLQUFiLENBRkE7QUFHQSxXQUFLLE9BQUwsR0FBZSxPQUFmLENBSEE7S0FKRjs7aUJBUkk7O2lDQWlCTyxTQUFvQjtBQUM3QixZQUFJLFlBQVksTUFBWixDQUR5QjtBQUU3QixZQUFNLFdBQVcsTUFBWCxDQUZ1QjtBQUc3QixpQkFBUyxPQUFULENBSDZCOztBQUs3QixZQUFJO0FBQ0YsaUJBQU8sTUFBUCxDQUFjLEtBQUssSUFBTCxDQUFVLEtBQUssS0FBTCxFQUFZLEtBQUssT0FBTCxDQUFwQyxFQURFO1NBQUosQ0FHQSxPQUFNLEtBQU4sRUFBYTtBQUNYLHNCQUFZLEtBQVosQ0FEVztTQUFiOztBQUlBLGlCQUFTLFFBQVQsQ0FaNkI7O0FBYzdCLFlBQUksYUFBYSxNQUFiLEVBQXFCO0FBQ3ZCLGdCQUFNLFNBQU4sQ0FEdUI7U0FBekI7Ozs7V0EvQkU7OztBQW9DTixjQUFZLFNBQVosQ0FBc0IsS0FBdEIsR0FBOEIsYUFBOUI7O01BRWE7QUFVWCxhQVZXLFFBVVgsQ0FBWSxPQUFaLEVBQWlDLFVBQWpDLEVBQXFFLFFBQXJFLEVBQStGOzRCQVZwRixVQVVvRjs7QUFDN0YsV0FBSyxPQUFMLEdBQWUsT0FBZixDQUQ2RjtBQUU3RixXQUFLLFVBQUwsR0FBa0IsVUFBbEIsQ0FGNkY7QUFHN0YsV0FBSyxRQUFMLEdBQWdCLFFBQWhCLENBSDZGO0FBSTdGLFdBQUssR0FBTCxHQUFXLGNBQWMsSUFBZCxHQUFxQixJQUFyQixHQUE0QixXQUFXLEdBQVgsQ0FKc0Q7S0FBL0Y7O2lCQVZXOzs4QkFnQmE7QUFDdEIsWUFBSSxVQUFVLElBQVYsRUFBZ0I7QUFDbEIsZ0JBQU0sVUFBVSwyRUFBVixDQUFOLENBRGtCO1NBQXBCOztBQUlBLGVBQU8sT0FBTyxJQUFQLENBQVksS0FBSyxPQUFMLEVBQWMsS0FBSyxVQUFMLEVBQWlCLEtBQUssUUFBTCxDQUFsRCxDQUxzQjs7OztXQWhCYjs7O0FBd0JiLFdBQVMsU0FBVCxDQUFtQixLQUFuQixHQUEyQixVQUEzQjs7TUFFTTtBQVFKLGFBUkksU0FRSixDQUFZLEdBQVosRUFBeUIsSUFBekIsRUFBNEMsSUFBNUMsRUFBaUU7NEJBUjdELFdBUTZEOztBQUMvRCxXQUFLLEdBQUwsR0FBVyxHQUFYLENBRCtEO0FBRS9ELFdBQUssSUFBTCxHQUFZLElBQVosQ0FGK0Q7QUFHL0QsV0FBSyxJQUFMLEdBQVksSUFBWixDQUgrRDtLQUFqRTs7aUJBUkk7OzhCQWFjOzs7QUFDaEIsWUFBSSxVQUFVLElBQVYsRUFBZ0I7QUFDbEIsZ0JBQU0sVUFBVSwyRUFBVixDQUFOLENBRGtCO1NBQXBCOztBQUlBLGVBQU8sbUJBQU8sS0FBUCxpQkFBYSxLQUFLLEdBQUwsRUFBVSxLQUFLLElBQUwsNEJBQWMsS0FBSyxJQUFMLEVBQXJDLENBQVAsQ0FMZ0I7Ozs7V0FiZDs7O0FBcUJOLFlBQVUsU0FBVixDQUFvQixLQUFwQixHQUE0QixVQUE1Qjs7QUFFTyxNQUFNLHNCQUNYLFNBRFcsSUFDWCxDQUFFLElBQUYsRUFDRSxLQURGLEVBRUUsT0FGRjtXQUlBLElBQUksV0FBSixDQUNFLElBREYsRUFFRSxLQUZGLEVBR0UsT0FIRjtHQUpBOztBQVVLLE1BQU0sc0JBQ1gsU0FEVyxJQUNYLENBQUMsT0FBRDtXQUNFLFVBQVUsSUFBVixHQUNBLE9BREEsR0FFQSxPQUFPLElBQVAsSUFBZSxJQUFmLEdBQ0EsT0FEQSxHQUVBLE9BQU8sSUFBUCxDQUFZLE9BQVosQ0FGQTtHQUhGOztBQVFLLE1BQU0sc0JBQ1gsU0FEVyxJQUNYLENBQUUsT0FBRixFQUNFLFVBREYsRUFFRSxRQUZGO1dBSUUsVUFBVSxJQUFWLEdBQ0EsSUFBSSxRQUFKLENBQWEsT0FBYixFQUFzQixVQUF0QixFQUFrQyxRQUFsQyxDQURBLEdBRUEsT0FBTyxJQUFQLENBQVksT0FBWixFQUFxQixVQUFyQixFQUFpQyxRQUFqQyxDQUZBO0dBSkY7O0FBU0ssTUFBTSx3QkFDWCxTQURXLEtBQ1gsQ0FBRSxHQUFGLEVBQ0UsSUFERjtzQ0FFSzs7Ozs7O1dBRUgsVUFBVSxJQUFWLEdBQ0EsSUFBSSxTQUFKLENBQWMsR0FBZCxFQUFtQixJQUFuQixFQUF5QixJQUF6QixDQURBLEdBRUEsb0JBQU8sS0FBUCxrQkFBYSxLQUFLLGFBQVMsS0FBM0IsQ0FGQTtHQUpGIiwiZmlsZSI6ImRvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbi8qOjpcbmltcG9ydCB0eXBlIHtUZXh0LCBLZXksIFRhZ05hbWUsIFByb3BlcnR5RGljdGlvbmFyeX0gZnJvbSBcIi4vY29yZVwiXG5pbXBvcnQgdHlwZSB7VmlydHVhbFRleHQsIFZpcnR1YWxOb2RlLCBET00sIExhenlUcmVlLCBUaHVua30gZnJvbSBcIi4vY29yZVwiXG5pbXBvcnQgdHlwZSB7RHJpdmVyfSBmcm9tIFwiLi9kcml2ZXJcIlxuaW1wb3J0IHR5cGUge0FkZHJlc3N9IGZyb20gXCIuL3NpZ25hbFwiXG5cbmV4cG9ydCB0eXBlIHtUZXh0LCBLZXksIFRhZ05hbWUsIERPTX1cbiovXG5cbmxldCBkcml2ZXIvKjo/RHJpdmVyKi8gPSBudWxsXG5jb25zdCBhYnNlbnQgPSBuZXcgU3RyaW5nKFwiYWJzZW50XCIpXG5cbmNsYXNzIFZpcnR1YWxSb290IC8qOjo8bW9kZWwsIGFjdGlvbj4qLyB7XG4gIC8qOjpcbiAgJHR5cGU6IFwiVmlydHVhbFJvb3RcIjtcblxuICB2aWV3OiAobW9kZWw6bW9kZWwsIGFkZHJlc3M6QWRkcmVzczxhY3Rpb24+KSA9PiBET007XG4gIG1vZGVsOiBtb2RlbDtcbiAgYWRkcmVzczogQWRkcmVzczxhY3Rpb24+O1xuICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICB2aWV3Lyo6KG1vZGVsOm1vZGVsLCBhZGRyZXNzOkFkZHJlc3M8YWN0aW9uPikgPT4gRE9NKi9cbiAgLCBtb2RlbC8qOm1vZGVsKi9cbiAgLCBhZGRyZXNzLyo6QWRkcmVzczxhY3Rpb24+Ki9cbiAgKSB7XG4gICAgdGhpcy52aWV3ID0gdmlld1xuICAgIHRoaXMubW9kZWwgPSBtb2RlbFxuICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3NcbiAgfVxuICByZW5kZXJXaXRoKGN1cnJlbnQvKjpEcml2ZXIqLykge1xuICAgIGxldCBleGNlcHRpb24gPSBhYnNlbnRcbiAgICBjb25zdCBwcmV2aW91cyA9IGRyaXZlclxuICAgIGRyaXZlciA9IGN1cnJlbnRcblxuICAgIHRyeSB7XG4gICAgICBkcml2ZXIucmVuZGVyKHRoaXMudmlldyh0aGlzLm1vZGVsLCB0aGlzLmFkZHJlc3MpKVxuICAgIH1cbiAgICBjYXRjaChlcnJvcikge1xuICAgICAgZXhjZXB0aW9uID0gZXJyb3JcbiAgICB9XG5cbiAgICBkcml2ZXIgPSBwcmV2aW91c1xuXG4gICAgaWYgKGV4Y2VwdGlvbiAhPSBhYnNlbnQpIHtcbiAgICAgIHRocm93IGV4Y2VwdGlvblxuICAgIH1cbiAgfVxufVxuVmlydHVhbFJvb3QucHJvdG90eXBlLiR0eXBlID0gXCJWaXJ0dWFsUm9vdFwiXG5cbmV4cG9ydCBjbGFzcyBMYXp5Tm9kZSB7XG4gIC8qOjpcbiAgJHR5cGU6IFwiTGF6eVRyZWVcIjtcblxuICB0YWdOYW1lOiBUYWdOYW1lO1xuICBwcm9wZXJ0aWVzOiA/UHJvcGVydHlEaWN0aW9uYXJ5O1xuICBjaGlsZHJlbjogP0FycmF5PERPTT47XG4gIGtleTogP0tleTtcbiAgbmFtZXNwYWNlOiBzdHJpbmc7XG4gICovXG4gIGNvbnN0cnVjdG9yKHRhZ05hbWUvKjpUYWdOYW1lKi8sIHByb3BlcnRpZXMvKjo/UHJvcGVydHlEaWN0aW9uYXJ5Ki8sIGNoaWxkcmVuLyo6P0FycmF5PERPTT4qLykge1xuICAgIHRoaXMudGFnTmFtZSA9IHRhZ05hbWVcbiAgICB0aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzXG4gICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuXG4gICAgdGhpcy5rZXkgPSBwcm9wZXJ0aWVzID09IG51bGwgPyBudWxsIDogcHJvcGVydGllcy5rZXlcbiAgfVxuICBmb3JjZSgpLyo6VmlydHVhbE5vZGUqLyB7XG4gICAgaWYgKGRyaXZlciA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0xhenlUcmVlIG1heSBvbmx5IGJlIGZvcmNlZCBmcm9tIHdpdGggaW4gdGhlIFJvb3QucmVuZGVyV2l0aChkcml2ZXIpIGNhbGwnKVxuICAgIH1cblxuICAgIHJldHVybiBkcml2ZXIubm9kZSh0aGlzLnRhZ05hbWUsIHRoaXMucHJvcGVydGllcywgdGhpcy5jaGlsZHJlbilcbiAgfVxufVxuTGF6eU5vZGUucHJvdG90eXBlLiR0eXBlID0gXCJMYXp5VHJlZVwiO1xuXG5jbGFzcyBMYXp5VGh1bmsge1xuICAvKjo6XG4gICR0eXBlOiBcIkxhenlUcmVlXCI7XG5cbiAga2V5OiBLZXk7XG4gIHZpZXc6IEZ1bmN0aW9uO1xuICBhcmdzOiBBcnJheTxhbnk+O1xuICAqL1xuICBjb25zdHJ1Y3RvcihrZXkvKjpLZXkqLywgdmlldy8qOkZ1bmN0aW9uKi8sIGFyZ3MvKjpBcnJheTxhbnk+Ki8pIHtcbiAgICB0aGlzLmtleSA9IGtleVxuICAgIHRoaXMudmlldyA9IHZpZXdcbiAgICB0aGlzLmFyZ3MgPSBhcmdzXG4gIH1cbiAgZm9yY2UoKS8qOlRodW5rKi8ge1xuICAgIGlmIChkcml2ZXIgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdMYXp5VHJlZSBtYXkgb25seSBiZSBmb3JjZWQgZnJvbSB3aXRoIGluIHRoZSBSb290LnJlbmRlcldpdGgoZHJpdmVyKSBjYWxsJylcbiAgICB9XG5cbiAgICByZXR1cm4gZHJpdmVyLnRodW5rKHRoaXMua2V5LCB0aGlzLnZpZXcsIC4uLnRoaXMuYXJncylcbiAgfVxufVxuTGF6eVRodW5rLnByb3RvdHlwZS4kdHlwZSA9IFwiTGF6eVRyZWVcIjtcblxuZXhwb3J0IGNvbnN0IHJvb3QgPSAvKjo6PG1vZGVsLCBhY3Rpb24+Ki9cbiAgKCB2aWV3Lyo6KG1vZGVsOm1vZGVsLCBhZGRyZXNzOkFkZHJlc3M8YWN0aW9uPikgPT4gRE9NKi9cbiAgLCBtb2RlbC8qOm1vZGVsKi9cbiAgLCBhZGRyZXNzLyo6QWRkcmVzczxhY3Rpb24+Ki9cbiAgKS8qOlZpcnR1YWxSb290PG1vZGVsLCBhY3Rpb24+Ki8gPT5cbiAgbmV3IFZpcnR1YWxSb290XG4gICggdmlld1xuICAsIG1vZGVsXG4gICwgYWRkcmVzc1xuICApXG5cbmV4cG9ydCBjb25zdCB0ZXh0ID1cbiAgKGNvbnRlbnQvKjpUZXh0Ki8pLyo6VGV4dCB8IFZpcnR1YWxUZXh0Ki8gPT5cbiAgKCBkcml2ZXIgPT0gbnVsbFxuICA/IGNvbnRlbnRcbiAgOiBkcml2ZXIudGV4dCA9PSBudWxsXG4gID8gY29udGVudFxuICA6IGRyaXZlci50ZXh0KGNvbnRlbnQpXG4gIClcblxuZXhwb3J0IGNvbnN0IG5vZGUgPVxuICAoIHRhZ05hbWUvKjpUYWdOYW1lKi9cbiAgLCBwcm9wZXJ0aWVzLyo6P1Byb3BlcnR5RGljdGlvbmFyeSovXG4gICwgY2hpbGRyZW4vKjo/QXJyYXk8RE9NPiovXG4gICkvKjpWaXJ0dWFsTm9kZSB8IExhenlUcmVlPFZpcnR1YWxOb2RlPiovID0+XG4gICggZHJpdmVyID09IG51bGxcbiAgPyBuZXcgTGF6eU5vZGUodGFnTmFtZSwgcHJvcGVydGllcywgY2hpbGRyZW4pXG4gIDogZHJpdmVyLm5vZGUodGFnTmFtZSwgcHJvcGVydGllcywgY2hpbGRyZW4pXG4gIClcblxuZXhwb3J0IGNvbnN0IHRodW5rID0gLyo6OjxhLCBiLCBjLCBkLCBlLCBmLCBnLCBoLCBpLCBqPiovXG4gICgga2V5Lyo6c3RyaW5nKi9cbiAgLCB2aWV3Lyo6KGE6YSwgYjpiLCBjOmMsIGQ6ZCwgZTplLCBmOmYsIGc6ZywgaDpoLCBpOmksIGo6aikgPT4gRE9NKi9cbiAgLCAuLi5hcmdzLyo6QXJyYXk8YW55PiovXG4gICkvKjpUaHVuayB8IExhenlUcmVlPFRodW5rPiovID0+XG4gICggZHJpdmVyID09IG51bGxcbiAgPyBuZXcgTGF6eVRodW5rKGtleSwgdmlldywgYXJncylcbiAgOiBkcml2ZXIudGh1bmsoa2V5LCB2aWV3LCAuLi5hcmdzKVxuICApXG4iXX0=
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', './task'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('./task'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.task);
    global.effects = mod.exports;
  }
})(this, function (exports, _task2) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Effects = undefined;

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var raise = function raise(error) {
    throw Error('Effects should be created from task that never fail but it did fail with error ' + error);
  };

  var ignore = function ignore(_) {
    return void 0;
  };

  var nil = _task2.Task.succeed(void 0);

  var never = new _task2.Task(function (succeed, fail) {
    return void 0;
  });

  var Effects = function () {
    function Effects() {
      _classCallCheck(this, Effects);
    }

    _createClass(Effects, null, [{
      key: 'task',
      value: function task(_task) {
        console.warn('Effects.task is deprecated please use Effects.perform instead');
        return new Perform(_task);
      }
    }, {
      key: 'perform',
      value: function perform(task) {
        return new Perform(task);
      }
    }, {
      key: 'tick',
      value: function tick(tag) {
        console.warn('Effects.tick is deprecated please use Effects.perform(Task.requestAnimationFrame().map(tag)) instead');
        return new Perform(_task2.Task.requestAnimationFrame().map(tag));
      }
    }, {
      key: 'receive',
      value: function receive(action) {
        var fx = new Perform(new _task2.Task(function (succeed, fail) {
          return void Promise.resolve(action).then(succeed, fail);
        }));
        return fx;
      }
    }, {
      key: 'batch',
      value: function batch(effects) {
        return new Batch(effects);
      }
    }, {
      key: 'driver',
      value: function driver(address) {
        return function (fx) {
          if (!(fx instanceof None)) {
            _task2.Task.fork(fx.send(address), ignore, raise);
          }
        };
      }
    }]);

    return Effects;
  }();

  exports.Effects = Effects;

  var Perform = function (_Effects) {
    _inherits(Perform, _Effects);

    function Perform(task) {
      _classCallCheck(this, Perform);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Perform).call(this));

      _this.task = task;
      return _this;
    }

    _createClass(Perform, [{
      key: 'map',
      value: function map(f) {
        return new Perform(this.task.map(f));
      }
    }, {
      key: 'send',
      value: function send(address) {
        return this.task.chain(function (value) {
          return _task2.Task.send(address, value);
        });
      }
    }]);

    return Perform;
  }(Effects);

  var None = function (_Effects2) {
    _inherits(None, _Effects2);

    function None() {
      _classCallCheck(this, None);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(None).apply(this, arguments));
    }

    _createClass(None, [{
      key: 'map',
      value: function map(f) {
        return Effects.none;
      }
    }, {
      key: 'send',
      value: function send(address) {
        return nil;
      }
    }]);

    return None;
  }(Effects);

  Effects.none = new None();

  var Batch = function (_Effects3) {
    _inherits(Batch, _Effects3);

    function Batch(effects) {
      _classCallCheck(this, Batch);

      var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(Batch).call(this));

      _this3.effects = effects;
      return _this3;
    }

    _createClass(Batch, [{
      key: 'map',
      value: function map(f) {
        return new Batch(this.effects.map(function (effect) {
          return effect.map(f);
        }));
      }
    }, {
      key: 'send',
      value: function send(address) {
        var _this4 = this;

        return new _task2.Task(function (succeed, fail) {
          var effects = _this4.effects;

          var count = effects.length;
          var index = 0;
          while (index < count) {
            var effect = effects[index];
            if (!(effect instanceof None)) {
              _task2.Task.fork(effect.send(address), ignore, raise);
            }

            index = index + 1;
          }
          succeed(void 0);
        });
      }
    }]);

    return Batch;
  }(Effects);
});
//# sourceMappingURL=data:application/json;base64,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QUFVLElBQVYsRUFBbUI7Y0FDMUIseUJBRDBCOztBQUVqQyxjQUFNLFFBQVEsUUFBUSxNQUFSLENBRm1CO0FBR2pDLGNBQUksUUFBUSxDQUFSLENBSDZCO0FBSWpDLGlCQUFPLFFBQVEsS0FBUixFQUFlO0FBQ3BCLGdCQUFNLFNBQVMsUUFBUSxLQUFSLENBQVQsQ0FEYztBQUVwQixnQkFBSSxFQUFFLGtCQUFrQixJQUFsQixDQUFGLEVBQTJCO0FBQzdCLDBCQUFLLElBQUwsQ0FBVSxPQUFPLElBQVAsQ0FBWSxPQUFaLENBQVYsRUFBZ0MsTUFBaEMsRUFBd0MsS0FBeEMsRUFENkI7YUFBL0I7O0FBSUEsb0JBQVEsUUFBUSxDQUFSLENBTlk7V0FBdEI7QUFRQSxrQkFBUSxLQUFLLENBQUwsQ0FBUixDQVppQztTQUFuQixDQUFoQixDQURpRDs7OztXQVgvQztJQUF3QiIsImZpbGUiOiJlZmZlY3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0IHtUYXNrfSBmcm9tIFwiLi90YXNrXCJcblxuLyo6OlxuaW1wb3J0IHR5cGUge05ldmVyfSBmcm9tIFwiLi9lZmZlY3RzXCJcbmltcG9ydCB0eXBlIHtBZGRyZXNzfSBmcm9tIFwiLi9zaWduYWxcIlxuKi9cblxuY29uc3QgcmFpc2UgPVxuICBlcnJvciA9PiB7XG4gICAgdGhyb3cgRXJyb3IoYEVmZmVjdHMgc2hvdWxkIGJlIGNyZWF0ZWQgZnJvbSB0YXNrIHRoYXQgbmV2ZXIgZmFpbCBidXQgaXQgZGlkIGZhaWwgd2l0aCBlcnJvciAke2Vycm9yfWApXG4gIH1cblxuY29uc3QgaWdub3JlID1cbiAgXyA9PlxuICB2b2lkKDApXG5cbmNvbnN0IG5pbCA9XG4gIFRhc2suc3VjY2VlZCh2b2lkKDApKVxuXG5jb25zdCBuZXZlciA9XG4gIG5ldyBUYXNrKChzdWNjZWVkLCBmYWlsKSA9PiB2b2lkKDApKVxuXG5leHBvcnQgY2xhc3MgRWZmZWN0cyAvKjo6PGE+Ki8ge1xuICBzdGF0aWMgdGFzayAvKjo6PGE+Ki8odGFzay8qOlRhc2s8TmV2ZXIsIGE+Ki8pLyo6RWZmZWN0czxhPiovIHtcbiAgICBjb25zb2xlLndhcm4oJ0VmZmVjdHMudGFzayBpcyBkZXByZWNhdGVkIHBsZWFzZSB1c2UgRWZmZWN0cy5wZXJmb3JtIGluc3RlYWQnKVxuICAgIHJldHVybiBuZXcgUGVyZm9ybSh0YXNrKVxuICB9XG4gIHN0YXRpYyBwZXJmb3JtIC8qOjo8YT4qLyh0YXNrLyo6VGFzazxOZXZlciwgYT4qLykvKjpFZmZlY3RzPGE+Ki8ge1xuICAgIHJldHVybiBuZXcgUGVyZm9ybSh0YXNrKVxuICB9XG4gIHN0YXRpYyB0aWNrIC8qOjo8YT4qLyh0YWcvKjoodGltZTpudW1iZXIpID0+IGEqLykvKjpFZmZlY3RzPGE+Ki8ge1xuICAgIGNvbnNvbGUud2FybignRWZmZWN0cy50aWNrIGlzIGRlcHJlY2F0ZWQgcGxlYXNlIHVzZSBFZmZlY3RzLnBlcmZvcm0oVGFzay5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKS5tYXAodGFnKSkgaW5zdGVhZCcpXG4gICAgcmV0dXJuIG5ldyBQZXJmb3JtKFRhc2sucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkubWFwKHRhZykpXG4gIH1cbiAgc3RhdGljIHJlY2VpdmUgLyo6OjxhPiovKGFjdGlvbi8qOmEqLykvKjpFZmZlY3RzPGE+Ki8ge1xuICAgIGNvbnN0IGZ4ID1cbiAgICAgIG5ldyBQZXJmb3JtXG4gICAgICAoIG5ldyBUYXNrXG4gICAgICAgICggKHN1Y2NlZWQsIGZhaWwpID0+XG4gICAgICAgICAgdm9pZFxuICAgICAgICAgICggUHJvbWlzZVxuICAgICAgICAgICAgLnJlc29sdmUoYWN0aW9uKVxuICAgICAgICAgICAgLnRoZW4oc3VjY2VlZCwgZmFpbClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgICByZXR1cm4gZnhcbiAgfVxuICBzdGF0aWMgYmF0Y2ggLyo6OjxhPiovKGVmZmVjdHMvKjpBcnJheTxFZmZlY3RzPGE+PiovKS8qOkVmZmVjdHM8YT4qLyB7XG4gICAgcmV0dXJuIG5ldyBCYXRjaChlZmZlY3RzKVxuICB9XG4gIHN0YXRpYyBkcml2ZXIgLyo6OjxhPiovKGFkZHJlc3MvKjpBZGRyZXNzPGE+Ki8pLyo6KGZ4OkVmZmVjdHM8YT4pID0+IHZvaWQqLyB7XG4gICAgcmV0dXJuIGZ4ID0+IHtcbiAgICAgIGlmICghKGZ4IGluc3RhbmNlb2YgTm9uZSkpIHtcbiAgICAgICAgVGFzay5mb3JrKGZ4LnNlbmQoYWRkcmVzcyksIGlnbm9yZSwgcmFpc2UpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qOjpcbiAgc3RhdGljIG5vbmU6RWZmZWN0czxhbnk+O1xuICB0YXNrOiBUYXNrPE5ldmVyLCBhPjtcbiAgbWFwOiA8Yj4gKGY6KGE6YSk9PmIpID0+IEVmZmVjdHM8Yj47XG4gIHNlbmQ6IChhZGRyZXNzOkFkZHJlc3M8YT4pID0+IFRhc2s8TmV2ZXIsIHZvaWQ+O1xuICAqL1xufVxuXG5jbGFzcyBQZXJmb3JtIC8qOjo8YT4qLyBleHRlbmRzIEVmZmVjdHMgLyo6OjxhPiovIHtcbiAgY29uc3RydWN0b3IodGFzay8qOlRhc2s8TmV2ZXIsIGE+Ki8pIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy50YXNrID0gdGFza1xuICB9XG4gIG1hcCAvKjo6PGI+Ki8gKGYvKjooYTphKT0+YiovKS8qOkVmZmVjdHM8Yj4qLyB7XG4gICAgcmV0dXJuIG5ldyBQZXJmb3JtKHRoaXMudGFzay5tYXAoZikpXG4gIH1cbiAgc2VuZChhZGRyZXNzLyo6QWRkcmVzczxhPiovKS8qOlRhc2s8TmV2ZXIsIHZvaWQ+Ki8ge1xuICAgIHJldHVybiB0aGlzLnRhc2suY2hhaW4odmFsdWUgPT4gVGFzay5zZW5kKGFkZHJlc3MsIHZhbHVlKSlcbiAgfVxufVxuXG5jbGFzcyBOb25lIC8qOjo8YT4qLyBleHRlbmRzIEVmZmVjdHMgLyo6Ojxhbnk+Ki8ge1xuICBtYXAvKjo6PGI+Ki8oZi8qOihhOmEpPT5iKi8pLyo6RWZmZWN0czxiPiovIHtcbiAgICByZXR1cm4gRWZmZWN0cy5ub25lXG4gIH1cbiAgc2VuZChhZGRyZXNzLyo6QWRkcmVzczxhPiovKS8qOlRhc2s8TmV2ZXIsIHZvaWQ+Ki8ge1xuICAgIHJldHVybiBuaWxcbiAgfVxufVxuRWZmZWN0cy5ub25lID0gbmV3IE5vbmUoKVxuXG5jbGFzcyBCYXRjaCAvKjo6PGE+Ki8gZXh0ZW5kcyBFZmZlY3RzIC8qOjo8YT4qLyB7XG4gIC8qOjpcbiAgZWZmZWN0czogQXJyYXk8RWZmZWN0czxhPj47XG4gICovXG4gIGNvbnN0cnVjdG9yKGVmZmVjdHMvKjpBcnJheTxFZmZlY3RzPGE+PiovKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuZWZmZWN0cyA9IGVmZmVjdHNcbiAgfVxuICBtYXAvKjo6PGI+Ki8oZi8qOihhOmEpPT5iKi8pLyo6RWZmZWN0czxiPiovIHtcbiAgICByZXR1cm4gbmV3IEJhdGNoKHRoaXMuZWZmZWN0cy5tYXAoZWZmZWN0ID0+IGVmZmVjdC5tYXAoZikpKVxuICB9XG4gIHNlbmQoYWRkcmVzcy8qOkFkZHJlc3M8YT4qLykvKjpUYXNrPE5ldmVyLCB2b2lkPiovIHtcbiAgICByZXR1cm4gbmV3IFRhc2soKHN1Y2NlZWQsIGZhaWwpID0+IHtcbiAgICAgIGNvbnN0IHtlZmZlY3RzfSA9IHRoaXNcbiAgICAgIGNvbnN0IGNvdW50ID0gZWZmZWN0cy5sZW5ndGhcbiAgICAgIGxldCBpbmRleCA9IDBcbiAgICAgIHdoaWxlIChpbmRleCA8IGNvdW50KSB7XG4gICAgICAgIGNvbnN0IGVmZmVjdCA9IGVmZmVjdHNbaW5kZXhdXG4gICAgICAgIGlmICghKGVmZmVjdCBpbnN0YW5jZW9mIE5vbmUpKSB7XG4gICAgICAgICAgVGFzay5mb3JrKGVmZmVjdC5zZW5kKGFkZHJlc3MpLCBpZ25vcmUsIHJhaXNlKVxuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXggPSBpbmRleCArIDFcbiAgICAgIH1cbiAgICAgIHN1Y2NlZWQodm9pZCgwKSlcbiAgICB9KVxuICB9XG59XG4iXX0=
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./dom"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./dom"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.dom);
    global.html = mod.exports;
  }
})(this, function (exports, _dom) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.html = undefined;
  var html = exports.html = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "g", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"].reduce(function (html, tagName) {
    var element = function element(properties, children) {
      return (0, _dom.node)(tagName, properties, children);
    };

    html[tagName] = element;
    return html;
  }, Object.create(null));
});
//# sourceMappingURL=data:application/json;base64,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LENBQWMsSUFBZCxDQXhCSCxDQURXIiwiZmlsZSI6Imh0bWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQge25vZGV9IGZyb20gXCIuL2RvbVwiXG4vKjo6XG5pbXBvcnQgdHlwZSB7SHRtbCwgZWxlbWVudH0gZnJvbSBcIi4vaHRtbFwiXG4qL1xuXG5cbmV4cG9ydCBjb25zdCBodG1sLyo6SHRtbCovID1cbiAgW1wiYVwiLFwiYWJiclwiLFwiYWRkcmVzc1wiLFwiYXJlYVwiLFwiYXJ0aWNsZVwiLFwiYXNpZGVcIixcImF1ZGlvXCIsXCJiXCIsXCJiYXNlXCIsXCJiZGlcIixcbiAgIFwiYmRvXCIsXCJiaWdcIixcImJsb2NrcXVvdGVcIixcImJvZHlcIixcImJyXCIsXCJidXR0b25cIixcImNhbnZhc1wiLFwiY2FwdGlvblwiLFwiY2l0ZVwiLFxuICAgXCJjb2RlXCIsXCJjb2xcIixcImNvbGdyb3VwXCIsXCJkYXRhXCIsXCJkYXRhbGlzdFwiLFwiZGRcIixcImRlbFwiLFwiZGV0YWlsc1wiLFwiZGZuXCIsXG4gICBcImRpYWxvZ1wiLFwiZGl2XCIsXCJkbFwiLFwiZHRcIixcImVtXCIsXCJlbWJlZFwiLFwiZmllbGRzZXRcIixcImZpZ2NhcHRpb25cIixcImZpZ3VyZVwiLFxuICAgXCJmb290ZXJcIixcImZvcm1cIixcImgxXCIsXCJoMlwiLFwiaDNcIixcImg0XCIsXCJoNVwiLFwiaDZcIixcImhlYWRcIixcImhlYWRlclwiLFwiaHJcIixcImh0bWxcIixcbiAgIFwiaVwiLFwiaWZyYW1lXCIsXCJpbWdcIixcImlucHV0XCIsXCJpbnNcIixcImtiZFwiLFwia2V5Z2VuXCIsXCJsYWJlbFwiLFwibGVnZW5kXCIsXCJsaVwiLFwibGlua1wiLFxuICAgXCJtYWluXCIsXCJtYXBcIixcIm1hcmtcIixcIm1lbnVcIixcIm1lbnVpdGVtXCIsXCJtZXRhXCIsXCJtZXRlclwiLFwibmF2XCIsXCJub3NjcmlwdFwiLFxuICAgXCJvYmplY3RcIixcIm9sXCIsXCJvcHRncm91cFwiLFwib3B0aW9uXCIsXCJvdXRwdXRcIixcInBcIixcInBhcmFtXCIsXCJwaWN0dXJlXCIsXCJwcmVcIixcbiAgIFwicHJvZ3Jlc3NcIixcInFcIixcInJwXCIsXCJydFwiLFwicnVieVwiLFwic1wiLFwic2FtcFwiLFwic2NyaXB0XCIsXCJzZWN0aW9uXCIsXCJzZWxlY3RcIixcbiAgIFwic21hbGxcIixcInNvdXJjZVwiLFwic3BhblwiLFwic3Ryb25nXCIsXCJzdHlsZVwiLFwic3ViXCIsXCJzdW1tYXJ5XCIsXCJzdXBcIixcInRhYmxlXCIsXG4gICBcInRib2R5XCIsXCJ0ZFwiLFwidGV4dGFyZWFcIixcInRmb290XCIsXCJ0aFwiLFwidGhlYWRcIixcInRpbWVcIixcInRpdGxlXCIsXCJ0clwiLFwidHJhY2tcIixcbiAgIFwidVwiLFwidWxcIixcInZhclwiLFwidmlkZW9cIixcIndiclwiLFwiY2lyY2xlXCIsXCJjbGlwUGF0aFwiLFwiZGVmc1wiLFwiZWxsaXBzZVwiLFwiZ1wiLFwibGluZVwiLFxuICAgXCJsaW5lYXJHcmFkaWVudFwiLFwibWFza1wiLFwicGF0aFwiLFwicGF0dGVyblwiLFwicG9seWdvblwiLFwicG9seWxpbmVcIixcInJhZGlhbEdyYWRpZW50XCIsXG4gICBcInJlY3RcIixcInN0b3BcIixcInN2Z1wiLFwidGV4dFwiLFwidHNwYW5cIlxuICBdXG4gIC5yZWR1Y2VcbiAgKCAoaHRtbCwgdGFnTmFtZSkgPT4ge1xuICAgICAgY29uc3QgZWxlbWVudC8qOmVsZW1lbnQqLyA9IChwcm9wZXJ0aWVzLCBjaGlsZHJlbikgPT5cbiAgICAgICAgbm9kZSh0YWdOYW1lLCBwcm9wZXJ0aWVzLCBjaGlsZHJlbilcblxuICAgICAgaHRtbFt0YWdOYW1lXSA9IGVsZW1lbnRcbiAgICAgIHJldHVybiBodG1sXG4gICAgfVxuICAgIC8vIEBIYWNrOiBXb3JrYXJvdW5kaW5nIGZhY2Vib29rL2Zsb3cjMTY4M1xuICAsIChPYmplY3QuY3JlYXRlKG51bGwpLyo6Oiwge30qLylcbiAgKTtcbiJdfQ==
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./dom", "./html", "./signal", "./application", "./effects", "./task"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./dom"), require("./html"), require("./signal"), require("./application"), require("./effects"), require("./task"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.dom, global.html, global.signal, global.application, global.effects, global.task);
    global.index = mod.exports;
  }
})(this, function (exports, _dom, _html, _signal, _application, _effects, _task) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "thunk", {
    enumerable: true,
    get: function () {
      return _dom.thunk;
    }
  });
  Object.defineProperty(exports, "node", {
    enumerable: true,
    get: function () {
      return _dom.node;
    }
  });
  Object.defineProperty(exports, "text", {
    enumerable: true,
    get: function () {
      return _dom.text;
    }
  });
  Object.defineProperty(exports, "html", {
    enumerable: true,
    get: function () {
      return _html.html;
    }
  });
  Object.defineProperty(exports, "forward", {
    enumerable: true,
    get: function () {
      return _signal.forward;
    }
  });
  Object.defineProperty(exports, "mailbox", {
    enumerable: true,
    get: function () {
      return _signal.mailbox;
    }
  });
  Object.defineProperty(exports, "start", {
    enumerable: true,
    get: function () {
      return _application.start;
    }
  });
  Object.defineProperty(exports, "beginner", {
    enumerable: true,
    get: function () {
      return _application.beginner;
    }
  });
  Object.defineProperty(exports, "Effects", {
    enumerable: true,
    get: function () {
      return _effects.Effects;
    }
  });
  Object.defineProperty(exports, "Task", {
    enumerable: true,
    get: function () {
      return _task.Task;
    }
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQkFFUTs7Ozs7O2tCQUFPOzs7Ozs7a0JBQU07Ozs7OzttQkFDYjs7Ozs7O3FCQUNBOzs7Ozs7cUJBQVM7Ozs7OzswQkFDVDs7Ozs7OzBCQUFPOzs7Ozs7c0JBQ1A7Ozs7OzttQkFDQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmV4cG9ydCB7dGh1bmssIG5vZGUsIHRleHR9IGZyb20gXCIuL2RvbVwiXG5leHBvcnQge2h0bWx9IGZyb20gXCIuL2h0bWxcIlxuZXhwb3J0IHtmb3J3YXJkLCBtYWlsYm94fSBmcm9tIFwiLi9zaWduYWxcIlxuZXhwb3J0IHtzdGFydCwgYmVnaW5uZXJ9IGZyb20gXCIuL2FwcGxpY2F0aW9uXCJcbmV4cG9ydCB7RWZmZWN0c30gZnJvbSBcIi4vZWZmZWN0c1wiXG5leHBvcnQge1Rhc2t9IGZyb20gXCIuL3Rhc2tcIlxuXG4vKjo6XG5leHBvcnQgdHlwZSB7QWRkcmVzcywgTWFpbGJveCwgU2lnbmFsfSBmcm9tIFwiLi9zaWduYWxcIlxuZXhwb3J0IHR5cGUge0tleSwgVGFnTmFtZSwgVGV4dCwgUHJvcGVydHlEaWN0aW9uYXJ5LCBWaXJ0dWFsVGV4dCwgVmlydHVhbE5vZGUsIFRodW5rLCBXaWRnZXQsIExhenlUcmVlLCBWaXJ0dWFsVHJlZX0gZnJvbSBcIi4vY29yZVwiXG5leHBvcnQgdHlwZSB7VmlydHVhbFJvb3R9IGZyb20gXCIuL2RyaXZlclwiXG5leHBvcnQgdHlwZSB7QXBwbGljYXRpb24sIEFkdmFuY2VkQ29uZmlndXJhdGlvbiwgQmVnaW5uZXJDb25maWd1cmF0aW9ufSBmcm9tIFwiLi9hcHBsaWNhdGlvblwiXG5leHBvcnQgdHlwZSB7SW5pdCwgVXBkYXRlLCBWaWV3fSBmcm9tIFwiLi9hcHBsaWNhdGlvblwiXG5leHBvcnQgdHlwZSB7RE9NfSBmcm9tIFwiLi9kb21cIlxuZXhwb3J0IHR5cGUge05ldmVyfSBmcm9tIFwiLi9lZmZlY3RzXCJcbiovXG4iXX0=
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.preemptiveAnimationFrame = mod.exports;
  }
})(this, function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var NO_REQUEST = 0;
  var PENDING_REQUEST = 1;
  var EXTRA_REQUEST = 2;

  var nextID = 0;
  var state = NO_REQUEST;
  var requests = [];
  var ids = [];

  var absent = new String("absent");

  var requestAnimationFrame = exports.requestAnimationFrame = function requestAnimationFrame(request) {
    if (state === NO_REQUEST) {
      window.requestAnimationFrame(performAnimationFrame);
    }

    var id = ++nextID;
    requests.push(request);
    ids.push(id);
    state = PENDING_REQUEST;
    return id;
  };

  var cancelAnimationFrame = exports.cancelAnimationFrame = function cancelAnimationFrame(id) {
    var index = ids.indexOf(id);
    if (index >= 0) {
      ids.splice(index, 1);
      requests.splice(index, 1);
    }
  };

  var forceAnimationFrame = exports.forceAnimationFrame = function forceAnimationFrame() {
    var time = arguments.length <= 0 || arguments[0] === undefined ? window.performance.now() : arguments[0];
    return performAnimationFrame(time);
  };

  var performAnimationFrame = function performAnimationFrame(time) {
    switch (state) {
      case NO_REQUEST:
        throw Error("Unexpected frame request");
      case PENDING_REQUEST:
        window.requestAnimationFrame(performAnimationFrame);
        state = EXTRA_REQUEST;
        ids.splice(0);
        dispatchAnimationFrame(requests.splice(0), 0, time);
        break;
      case EXTRA_REQUEST:
        state = NO_REQUEST;
        break;
    }
  };

  var dispatchAnimationFrame = function dispatchAnimationFrame(requests, index, time) {
    var exception = absent;
    var count = requests.length;
    try {
      while (index < count) {
        var request = requests[index];
        index = index + 1;
        request(time);
      }
    } catch (error) {
      exception = error;
    }

    if (index < count) {
      dispatchAnimationFrame(requests, index, time);
    }

    if (exception != absent) {
      throw exception;
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByZWVtcHRpdmUtYW5pbWF0aW9uLWZyYW1lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFXQSxNQUFNLGFBQWEsQ0FBYjtBQUNOLE1BQU0sa0JBQWtCLENBQWxCO0FBQ04sTUFBTSxnQkFBZ0IsQ0FBaEI7O0FBRU4sTUFBSSxTQUFvQixDQUFwQjtBQUNKLE1BQUksUUFBa0IsVUFBbEI7QUFDSixNQUFJLFdBQXlDLEVBQXpDO0FBQ0osTUFBSSxNQUF3QixFQUF4Qjs7QUFFSixNQUFNLFNBQVMsSUFBSSxNQUFKLENBQVcsUUFBWCxDQUFUOztBQUVDLE1BQU0sd0RBQ1gsU0FEVyxxQkFDWCxDQUFDLE9BQUQsRUFBa0M7QUFDaEMsUUFBSSxVQUFVLFVBQVYsRUFBc0I7QUFDeEIsYUFBTyxxQkFBUCxDQUE2QixxQkFBN0IsRUFEd0I7S0FBMUI7O0FBSUEsUUFBTSxLQUFLLEVBQUUsTUFBRixDQUxxQjtBQU1oQyxhQUFTLElBQVQsQ0FBYyxPQUFkLEVBTmdDO0FBT2hDLFFBQUksSUFBSixDQUFTLEVBQVQsRUFQZ0M7QUFRaEMsWUFBUSxlQUFSLENBUmdDO0FBU2hDLFdBQU8sRUFBUCxDQVRnQztHQUFsQzs7QUFZSyxNQUFNLHNEQUNYLFNBRFcsb0JBQ1gsQ0FBQyxFQUFELEVBQTRCO0FBQzFCLFFBQU0sUUFBUSxJQUFJLE9BQUosQ0FBWSxFQUFaLENBQVIsQ0FEb0I7QUFFMUIsUUFBSSxTQUFTLENBQVQsRUFBWTtBQUNkLFVBQUksTUFBSixDQUFXLEtBQVgsRUFBa0IsQ0FBbEIsRUFEYztBQUVkLGVBQVMsTUFBVCxDQUFnQixLQUFoQixFQUF1QixDQUF2QixFQUZjO0tBQWhCO0dBRkY7O0FBUUssTUFBTSxvREFDWCxTQURXLG1CQUNYO1FBQUMsNkRBQWMsT0FBTyxXQUFQLENBQW1CLEdBQW5CO1dBQ2Ysc0JBQXNCLElBQXRCO0dBREE7O0FBR0YsTUFBTSx3QkFDSixTQURJLHFCQUNKLENBQUMsSUFBRCxFQUFtQjtBQUNqQixZQUFRLEtBQVI7QUFDRSxXQUFLLFVBQUw7QUFJRSxjQUFNLGlDQUFOLENBSkY7QUFERixXQU1PLGVBQUw7QUFLRSxlQUFPLHFCQUFQLENBQTZCLHFCQUE3QixFQUxGO0FBTUUsZ0JBQVEsYUFBUixDQU5GO0FBT0UsWUFBSSxNQUFKLENBQVcsQ0FBWCxFQVBGO0FBUUUsK0JBQXVCLFNBQVMsTUFBVCxDQUFnQixDQUFoQixDQUF2QixFQUEyQyxDQUEzQyxFQUE4QyxJQUE5QyxFQVJGO0FBU0UsY0FURjtBQU5GLFdBZ0JPLGFBQUw7QUFJRSxnQkFBUSxVQUFSLENBSkY7QUFLRSxjQUxGO0FBaEJGLEtBRGlCO0dBQW5COztBQTBCRixNQUFNLHlCQUNKLFNBREksc0JBQ0osQ0FBRSxRQUFGLEVBQ0UsS0FERixFQUVFLElBRkYsRUFHSztBQUNILFFBQUksWUFBWSxNQUFaLENBREQ7QUFFSCxRQUFNLFFBQVEsU0FBUyxNQUFULENBRlg7QUFHSCxRQUFJO0FBQ0YsYUFBTyxRQUFRLEtBQVIsRUFBZTtBQUNwQixZQUFNLFVBQVUsU0FBUyxLQUFULENBQVYsQ0FEYztBQUVwQixnQkFBUSxRQUFRLENBQVIsQ0FGWTtBQUdwQixnQkFBUSxJQUFSLEVBSG9CO09BQXRCO0tBREYsQ0FPQSxPQUFPLEtBQVAsRUFBYztBQUNaLGtCQUFZLEtBQVosQ0FEWTtLQUFkOztBQUlBLFFBQUksUUFBUSxLQUFSLEVBQWU7QUFDakIsNkJBQXVCLFFBQXZCLEVBQWlDLEtBQWpDLEVBQXdDLElBQXhDLEVBRGlCO0tBQW5COztBQUlBLFFBQUksYUFBYSxNQUFiLEVBQXFCO0FBQ3ZCLFlBQU0sU0FBTixDQUR1QjtLQUF6QjtHQXJCRiIsImZpbGUiOiJwcmVlbXB0aXZlLWFuaW1hdGlvbi1mcmFtZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbi8qOjpcbnR5cGUgVGltZSA9IG51bWJlclxudHlwZSBTdGF0ZSA9IDAgfCAxIHwgMlxuKi9cblxuLy8gSW52YXJpYW50czpcbi8vIDEuIEluIHRoZSBOT19SRVFVRVNUIHN0YXRlLCB0aGVyZSBpcyBuZXZlciBhIHNjaGVkdWxlZCBhbmltYXRpb24gZnJhbWUuXG4vLyAyLiBJbiB0aGUgUEVORElOR19SRVFVRVNUIGFuZCBFWFRSQV9SRVFVRVNUIHN0YXRlcywgdGhlcmUgaXMgYWx3YXlzIGV4YWN0bHlcbi8vIG9uZSBzY2hlZHVsZWQgYW5pbWF0aW9uIGZyYW1lLlxuY29uc3QgTk9fUkVRVUVTVCA9IDBcbmNvbnN0IFBFTkRJTkdfUkVRVUVTVCA9IDFcbmNvbnN0IEVYVFJBX1JFUVVFU1QgPSAyXG5cbmxldCBuZXh0SUQvKjpudW1iZXIqLyA9IDBcbmxldCBzdGF0ZS8qOlN0YXRlKi8gPSBOT19SRVFVRVNUXG5sZXQgcmVxdWVzdHMvKjpBcnJheTwodGltZTpUaW1lKSA9PiBhbnk+Ki8gPSBbXVxubGV0IGlkcy8qOkFycmF5PG51bWJlcj4qLyA9IFtdXG5cbmNvbnN0IGFic2VudCA9IG5ldyBTdHJpbmcoXCJhYnNlbnRcIilcblxuZXhwb3J0IGNvbnN0IHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IC8qOjo8YT4qL1xuICAocmVxdWVzdC8qOih0aW1lOlRpbWUpID0+IGEqLykgPT4ge1xuICAgIGlmIChzdGF0ZSA9PT0gTk9fUkVRVUVTVCkge1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShwZXJmb3JtQW5pbWF0aW9uRnJhbWUpXG4gICAgfVxuXG4gICAgY29uc3QgaWQgPSArK25leHRJRFxuICAgIHJlcXVlc3RzLnB1c2gocmVxdWVzdClcbiAgICBpZHMucHVzaChpZClcbiAgICBzdGF0ZSA9IFBFTkRJTkdfUkVRVUVTVFxuICAgIHJldHVybiBpZFxuICB9XG5cbmV4cG9ydCBjb25zdCBjYW5jZWxBbmltYXRpb25GcmFtZSA9XG4gIChpZC8qOm51bWJlciovKS8qOnZvaWQqLyA9PiB7XG4gICAgY29uc3QgaW5kZXggPSBpZHMuaW5kZXhPZihpZCk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIGlkcy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICByZXF1ZXN0cy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG5cbmV4cG9ydCBjb25zdCBmb3JjZUFuaW1hdGlvbkZyYW1lID1cbiAgKHRpbWUvKjpUaW1lKi89d2luZG93LnBlcmZvcm1hbmNlLm5vdygpKSA9PlxuICBwZXJmb3JtQW5pbWF0aW9uRnJhbWUodGltZSk7XG5cbmNvbnN0IHBlcmZvcm1BbmltYXRpb25GcmFtZSA9XG4gICh0aW1lLyo6VGltZSovKSA9PiB7XG4gICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgY2FzZSBOT19SRVFVRVNUOlxuICAgICAgICAvLyBUaGlzIHN0YXRlIHNob3VsZCBub3QgYmUgcG9zc2libGUuIEhvdyBjYW4gdGhlcmUgYmUgbm9cbiAgICAgICAgLy8gcmVxdWVzdCwgeWV0IHNvbWVob3cgd2UgYXJlIGFjdGl2ZWx5IGZ1bGZpbGxpbmcgYVxuICAgICAgICAvLyByZXF1ZXN0P1xuICAgICAgICB0aHJvdyBFcnJvcihgVW5leHBlY3RlZCBmcmFtZSByZXF1ZXN0YClcbiAgICAgIGNhc2UgUEVORElOR19SRVFVRVNUOlxuICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBkbyBub3QgKmtub3cqIHRoYXQgYW5vdGhlciBmcmFtZSBpc1xuICAgICAgICAvLyBuZWVkZWQsIGJ1dCB3ZSBtYWtlIGFuIGV4dHJhIGZyYW1lIHJlcXVlc3QganVzdCBpblxuICAgICAgICAvLyBjYXNlLiBJdCdzIHBvc3NpYmxlIHRvIGRyb3AgYSBmcmFtZSBpZiBmcmFtZSBpcyByZXF1ZXN0ZWRcbiAgICAgICAgLy8gdG9vIGxhdGUsIHNvIHdlIGp1c3QgZG8gaXQgcHJlZW1wdGl2ZWx5LlxuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHBlcmZvcm1BbmltYXRpb25GcmFtZSlcbiAgICAgICAgc3RhdGUgPSBFWFRSQV9SRVFVRVNUXG4gICAgICAgIGlkcy5zcGxpY2UoMClcbiAgICAgICAgZGlzcGF0Y2hBbmltYXRpb25GcmFtZShyZXF1ZXN0cy5zcGxpY2UoMCksIDAsIHRpbWUpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIEVYVFJBX1JFUVVFU1Q6XG4gICAgICAgIC8vIFR1cm5zIG91dCB0aGUgZXh0cmEgcmVxdWVzdCB3YXMgbm90IG5lZWRlZCwgc28gd2Ugd2lsbFxuICAgICAgICAvLyBzdG9wIHJlcXVlc3RpbmcuIE5vIHJlYXNvbiB0byBjYWxsIGl0IGFsbCB0aGUgdGltZSBpZlxuICAgICAgICAvLyBubyBvbmUgbmVlZHMgaXQuXG4gICAgICAgIHN0YXRlID0gTk9fUkVRVUVTVFxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG5jb25zdCBkaXNwYXRjaEFuaW1hdGlvbkZyYW1lID0gLyo6OjxhPiovXG4gICggcmVxdWVzdHMvKjpBcnJheTwodGltZTpUaW1lKSA9PiBhPiovXG4gICwgaW5kZXgvKjpudW1iZXIqL1xuICAsIHRpbWUvKjpUaW1lKi9cbiAgKSA9PiB7XG4gICAgbGV0IGV4Y2VwdGlvbiA9IGFic2VudFxuICAgIGNvbnN0IGNvdW50ID0gcmVxdWVzdHMubGVuZ3RoXG4gICAgdHJ5IHtcbiAgICAgIHdoaWxlIChpbmRleCA8IGNvdW50KSB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSByZXF1ZXN0c1tpbmRleF1cbiAgICAgICAgaW5kZXggPSBpbmRleCArIDFcbiAgICAgICAgcmVxdWVzdCh0aW1lKVxuICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGV4Y2VwdGlvbiA9IGVycm9yXG4gICAgfVxuXG4gICAgaWYgKGluZGV4IDwgY291bnQpIHtcbiAgICAgIGRpc3BhdGNoQW5pbWF0aW9uRnJhbWUocmVxdWVzdHMsIGluZGV4LCB0aW1lKVxuICAgIH1cblxuICAgIGlmIChleGNlcHRpb24gIT0gYWJzZW50KSB7XG4gICAgICB0aHJvdyBleGNlcHRpb25cbiAgICB9XG4gIH1cbiJdfQ==
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.signal = mod.exports;
  }
})(this, function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var absent = new String("absent");

  var Input = function () {
    _createClass(Input, null, [{
      key: "Address",
      value: function Address(signal) {
        if (signal.address == null) {
          signal.address = signal.receive.bind(signal);

          return signal.address;
        } else {
          return signal.address;
        }
      }
    }, {
      key: "notify",
      value: function notify(message, addressBook, from, to) {
        var exception = absent;
        try {
          while (from < to) {
            var address = addressBook[from];
            if (address != null) {
              address(message);
            }
            from = from + 1;
          }
        } catch (error) {
          exception = error;
        }

        if (from < to) {
          Input.notify(message, addressBook, from + 1, to);
        }

        if (exception != absent) {
          throw exception;
        }
      }
    }, {
      key: "connect",
      value: function connect(signal, address) {
        if (signal.addressBook == null) {
          signal.addressBook = [address];
        } else {
          var addressBook = signal.addressBook;
          if (addressBook.indexOf(address) < 0) {
            addressBook.push(address);
          }
        }
      }
    }]);

    function Input(value) {
      _classCallCheck(this, Input);

      this.value = value;
      this.isBlocked = false;

      this.addressBook = null;
      this.queue = null;
      this.address = null;
    }

    _createClass(Input, [{
      key: "receive",
      value: function receive(value) {
        if (this.isBlocked) {
          if (this.queue == null) {
            this.queue = [value];
          } else {
            this.queue.push(value);
          }
        } else {
          var exception = absent;
          this.isBlocked = true;
          try {
            this.value = value;

            if (this.addressBook != null) {
              var addressBook = this.addressBook;
              Input.notify(value, addressBook, 0, addressBook.length);
            }
          } catch (error) {
            exception = error;
          }

          this.isBlocked = false;
          if (this.queue != null && this.queue.length > 0) {
            this.receive(value = this.queue.shift());
          }

          if (exception != absent) {
            throw exception;
          }
        }
      }
    }, {
      key: "subscribe",
      value: function subscribe(address) {
        Input.connect(this, address);
        address(this.value);
      }
    }, {
      key: "connect",
      value: function connect(address) {
        if (this.addressBook == null) {
          this.addressBook = [address];
        } else {
          var addressBook = this.addressBook;
          if (addressBook.indexOf(address) < 0) {
            addressBook.push(address);
          }
        }
      }
    }]);

    return Input;
  }();

  Input.prototype.$type = "Signal.Signal";

  var Inbox = function Inbox(message) {
    _classCallCheck(this, Inbox);

    this.signal = new Input(message);
    this.address = Input.Address(this.signal);
  };

  Inbox.prototype.$type = "Signal.Mailbox";

  var mailbox = exports.mailbox = function mailbox(message) {
    return new Inbox(message);
  };

  var Forward = function Forward(address, tag) {
    var forward = function forward(message) {
      return address(tag(message));
    };
    forward.to = address;
    forward.tag = tag;
    return forward;
  };

  if (global['reflex/address'] == null) {
    global['reflex/address'] = 0;
  }

  var forward = exports.forward = function forward(address, tag) {
    var id = address.id != null ? address.id : address.id = global['reflex/address']++;
    var key = "reflex/address/" + id;

    return tag[key] || (tag[key] = Forward(address, tag));
  };

  var reductions = exports.reductions = function reductions(step, state, input) {
    var output = new Input(state);
    input.connect(forward(Input.Address(output), function (value) {
      return step(output.value, value);
    }));
    return output;
  };

  var map = exports.map = function map(f, input) {
    var output = new Input(f(input.value));
    input.connect(forward(Input.Address(output), f));
    return output;
  };
});
//# sourceMappingURL=data:application/json;base64,
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', './preemptive-animation-frame'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('./preemptive-animation-frame'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.preemptiveAnimationFrame);
    global.task = mod.exports;
  }
})(this, function (exports, _preemptiveAnimationFrame) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Task = undefined;

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var Task = exports.Task = function () {
    _createClass(Task, null, [{
      key: 'create',
      value: function create(execute) {
        console.warn('Task.create is deprecated API use new Task instead');
        return new Task(execute);
      }
    }, {
      key: 'future',
      value: function future(request) {
        console.warn('Task.future is deprecated API use new Task instead');
        return new Future(request);
      }
    }, {
      key: 'succeed',
      value: function succeed(value) {
        return new Succeed(value);
      }
    }, {
      key: 'fail',
      value: function fail(error) {
        return new Fail(error);
      }
    }, {
      key: 'spawn',
      value: function spawn(task) {
        return new Spawn(task);
      }
    }, {
      key: 'sleep',
      value: function sleep(time) {
        return new Sleep(time);
      }
    }, {
      key: 'requestAnimationFrame',
      value: function requestAnimationFrame() {
        return new AnimationFrame();
      }
    }, {
      key: 'send',
      value: function send(address, message) {
        return new Send(address, message);
      }
    }, {
      key: 'fork',
      value: function fork(task, onSucceed, onFail) {
        return Process.fork(task, onSucceed, onFail);
      }
    }]);

    function Task(execute, cancel) {
      _classCallCheck(this, Task);

      if (execute != null) {
        this.fork = execute;
      }
      if (cancel != null) {
        this.abort = cancel;
      }
    }

    _createClass(Task, [{
      key: 'chain',
      value: function chain(next) {
        return new Chain(this, next);
      }
    }, {
      key: 'map',
      value: function map(f) {
        return new Map(this, f);
      }
    }, {
      key: 'capture',
      value: function capture(handle) {
        return new Capture(this, handle);
      }
    }, {
      key: 'format',
      value: function format(f) {
        return new Format(this, f);
      }
    }, {
      key: 'recover',
      value: function recover(regain) {
        return new Recover(this, regain);
      }
    }, {
      key: 'fork',
      value: function fork(succeed, fail) {}
    }, {
      key: 'abort',
      value: function abort(handle) {}
    }]);

    return Task;
  }();

  var Succeed = function (_Task) {
    _inherits(Succeed, _Task);

    function Succeed(value) {
      _classCallCheck(this, Succeed);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Succeed).call(this));

      _this.value = value;
      return _this;
    }

    _createClass(Succeed, [{
      key: 'fork',
      value: function fork(succeed, fail) {
        succeed(this.value);
      }
    }]);

    return Succeed;
  }(Task);

  var Fail = function (_Task2) {
    _inherits(Fail, _Task2);

    function Fail(error) {
      _classCallCheck(this, Fail);

      var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(Fail).call(this));

      _this2.error = error;
      return _this2;
    }

    _createClass(Fail, [{
      key: 'fork',
      value: function fork(succeed, fail) {
        fail(this.error);
      }
    }]);

    return Fail;
  }(Task);

  var Sleep = function (_Task3) {
    _inherits(Sleep, _Task3);

    function Sleep(time) {
      _classCallCheck(this, Sleep);

      var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(Sleep).call(this));

      _this3.time = time;
      return _this3;
    }

    _createClass(Sleep, [{
      key: 'fork',
      value: function fork(succeed, fail) {
        return setTimeout(succeed, this.time, void 0);
      }
    }, {
      key: 'abort',
      value: function abort(id) {
        clearTimeout(id);
      }
    }]);

    return Sleep;
  }(Task);

  var AnimationFrame = function (_Task4) {
    _inherits(AnimationFrame, _Task4);

    function AnimationFrame() {
      _classCallCheck(this, AnimationFrame);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(AnimationFrame).call(this));
    }

    _createClass(AnimationFrame, [{
      key: 'fork',
      value: function fork(succeed, fail) {
        return (0, _preemptiveAnimationFrame.requestAnimationFrame)(succeed);
      }
    }, {
      key: 'abort',
      value: function abort(id) {
        (0, _preemptiveAnimationFrame.cancelAnimationFrame)(id);
      }
    }]);

    return AnimationFrame;
  }(Task);

  var threadID = 0;

  var Spawn = function (_Task5) {
    _inherits(Spawn, _Task5);

    function Spawn(task) {
      _classCallCheck(this, Spawn);

      var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(Spawn).call(this));

      _this5.task = task;
      return _this5;
    }

    _createClass(Spawn, [{
      key: 'fork',
      value: function fork(succeed, fail) {
        var _this6 = this;

        Promise.resolve(null).then(function (_) {
          return Task.fork(_this6.task, noop, noop);
        });

        succeed(++threadID);
      }
    }]);

    return Spawn;
  }(Task);

  var Send = function (_Task6) {
    _inherits(Send, _Task6);

    function Send(address, message) {
      _classCallCheck(this, Send);

      var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(Send).call(this));

      _this7.message = message;
      _this7.address = address;
      return _this7;
    }

    _createClass(Send, [{
      key: 'fork',
      value: function fork(succeed, fail) {
        succeed(void this.address(this.message));
      }
    }]);

    return Send;
  }(Task);

  var Future = function (_Task7) {
    _inherits(Future, _Task7);

    function Future(request) {
      _classCallCheck(this, Future);

      var _this8 = _possibleConstructorReturn(this, Object.getPrototypeOf(Future).call(this));

      _this8.request = request;
      return _this8;
    }

    _createClass(Future, [{
      key: 'fork',
      value: function fork(succeed, fail) {
        this.request().then(succeed, fail);
      }
    }]);

    return Future;
  }(Task);

  var Then = function (_Task8) {
    _inherits(Then, _Task8);

    function Then(task) {
      _classCallCheck(this, Then);

      var _this9 = _possibleConstructorReturn(this, Object.getPrototypeOf(Then).call(this));

      _this9.task = task;
      return _this9;
    }

    _createClass(Then, [{
      key: 'fork',
      value: function fork(succeed, fail) {
        var _this10 = this;

        this.task.fork(function (value) {
          return void _this10.next(value).fork(succeed, fail);
        }, fail);
      }
    }]);

    return Then;
  }(Task);

  var Chain = function (_Then) {
    _inherits(Chain, _Then);

    function Chain(task, next) {
      _classCallCheck(this, Chain);

      var _this11 = _possibleConstructorReturn(this, Object.getPrototypeOf(Chain).call(this, task));

      _this11.next = next;
      return _this11;
    }

    return Chain;
  }(Then);

  var Map = function (_Then2) {
    _inherits(Map, _Then2);

    function Map(task, mapper) {
      _classCallCheck(this, Map);

      var _this12 = _possibleConstructorReturn(this, Object.getPrototypeOf(Map).call(this, task));

      _this12.mapper = mapper;
      return _this12;
    }

    _createClass(Map, [{
      key: 'next',
      value: function next(input) {
        return new Succeed(this.mapper(input));
      }
    }]);

    return Map;
  }(Then);

  var Catch = function (_Task9) {
    _inherits(Catch, _Task9);

    function Catch(task) {
      _classCallCheck(this, Catch);

      var _this13 = _possibleConstructorReturn(this, Object.getPrototypeOf(Catch).call(this));

      _this13.task = task;
      return _this13;
    }

    _createClass(Catch, [{
      key: 'fork',
      value: function fork(succeed, fail) {
        var _this14 = this;

        this.task.fork(succeed, function (error) {
          return void _this14.handle(error).fork(succeed, fail);
        });
      }
    }]);

    return Catch;
  }(Task);

  var Capture = function (_Catch) {
    _inherits(Capture, _Catch);

    function Capture(task, handle) {
      _classCallCheck(this, Capture);

      var _this15 = _possibleConstructorReturn(this, Object.getPrototypeOf(Capture).call(this, task));

      _this15.handle = handle;
      return _this15;
    }

    return Capture;
  }(Catch);

  var Recover = function (_Catch2) {
    _inherits(Recover, _Catch2);

    function Recover(task, regain) {
      _classCallCheck(this, Recover);

      var _this16 = _possibleConstructorReturn(this, Object.getPrototypeOf(Recover).call(this, task));

      _this16.regain = regain;
      return _this16;
    }

    _createClass(Recover, [{
      key: 'handle',
      value: function handle(error) {
        return new Succeed(this.regain(error));
      }
    }]);

    return Recover;
  }(Catch);

  var Format = function (_Catch3) {
    _inherits(Format, _Catch3);

    function Format(task, formatter) {
      _classCallCheck(this, Format);

      var _this17 = _possibleConstructorReturn(this, Object.getPrototypeOf(Format).call(this, task));

      _this17.formatter = formatter;
      return _this17;
    }

    _createClass(Format, [{
      key: 'handle',
      value: function handle(error) {
        return new Fail(this.formatter(error));
      }
    }]);

    return Format;
  }(Catch);

  var noop = function noop() {
    return void 0;
  };

  var nextID = 0;

  var Process = function () {
    _createClass(Process, null, [{
      key: 'fork',
      value: function fork(task, onSucceed, onFail) {
        var process = new Process(task);
        process.succeed = onSucceed;
        process.fail = onFail;
        process.schedule();
        return process;
      }
    }]);

    function Process(task) {
      _classCallCheck(this, Process);

      this.id = ++nextID;
      this.position = 0;
      this.root = task;
      this.stack = [];
      this.mailbox = [];
      this.abortHandle = null;
      this.isActive = true;
      this.isPending = false;
      this.success = null;
      this.failure = null;
      this.succeed = null;
      this.fail = null;
      this.onSucceed = this.onSucceed.bind(this);
      this.onFail = this.onFail.bind(this);
    }

    _createClass(Process, [{
      key: 'onSucceed',
      value: function onSucceed(value) {
        if (this.isPending) {
          this.isPending = false;
          this.abortHandle = null;

          if (this.success != null) {
            this.success.value = value;
          } else {
            this.success = new Succeed(value);
          }

          this.root = this.success;
          this.schedule();
        }
      }
    }, {
      key: 'onFail',
      value: function onFail(error) {
        if (this.isPending) {
          this.isPending = false;
          this.abortHandle = null;

          if (this.failure != null) {
            this.failure.error = error;
          } else {
            this.failure = new Fail(error);
          }

          this.root = this.failure;
          this.schedule();
        }
      }
    }, {
      key: 'kill',
      value: function kill(reason) {
        if (this.isActive) {
          this.isActive = false;
          if (this.root.abort) {
            this.root.abort(this.abortHandle);
          }
        }
      }
    }, {
      key: 'schedule',
      value: function schedule() {
        this.step();
      }
    }, {
      key: 'step',
      value: function step() {
        var process = this;
        while (process.isActive) {
          var task = process.root;
          if (task instanceof Succeed) {
            while (process.position < process.stack.length && process.stack[process.position] instanceof Catch) {
              process.position++;
            }

            if (process.position >= process.stack.length) {
              if (process.succeed != null) {
                process.succeed(task.value);
              }
              break;
            }

            var then = process.stack[process.position++];

            process.root = then.next(task.value);
            continue;
          }

          if (task instanceof Fail) {
            while (process.position < process.stack.length && process.stack[process.position] instanceof Then) {
              process.position++;
            }

            if (this.position >= process.stack.length) {
              if (process.fail != null) {
                process.fail(task.error);
              }
              break;
            }

            var _catch = process.stack[process.position++];

            process.root = _catch.handle(task.error);
            continue;
          }

          if (task instanceof Then) {
            if (process.position === 0) {
              process.stack.unshift(task);
            } else {
              process.stack[--process.position] = task;
            }

            process.root = task.task;

            continue;
          }

          if (task instanceof Catch) {
            if (process.position === 0) {
              process.stack.unshift(task);
            } else {
              process.stack[--process.position] = task;
            }

            process.root = task.task;

            continue;
          }

          if (task instanceof Task) {
            process.isPending = true;
            process.abortHandle = task.fork(process.onSucceed, process.onFail);
            break;
          }
        }
      }
    }]);

    return Process;
  }();
});
//# sourceMappingURL=data:application/json;base64,
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["./test", "../"], factory);
  } else if (typeof exports !== "undefined") {
    factory(require("./test"), require("../"));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.test, global._);
    global.testApi = mod.exports;
  }
})(this, function (_test, _) {
  "use strict";

  var _test2 = _interopRequireDefault(_test);

  var Reflex = _interopRequireWildcard(_);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
  };

  (0, _test2.default)("test exported api", function (assert) {
    assert.ok(_typeof(Reflex.node), "function");

    assert.ok(_typeof(Reflex.html), "object");
    assert.ok(_typeof(Reflex.html.div), "function");

    assert.ok(_typeof(Reflex.thunk), "function");
    assert.ok(_typeof(Reflex.send), "function");
    assert.ok(_typeof(Reflex.forward), "function");

    assert.ok(_typeof(Reflex.Application), "function");

    assert.ok(_typeof(Reflex.Task.succeed), "function");
    assert.ok(_typeof(Reflex.Task.fail), "function");
    assert.ok(_typeof(Reflex.Task.io), "function");
    assert.ok(_typeof(Reflex.Task.onSuccess), "function");
    assert.ok(_typeof(Reflex.Task.onFailure), "function");
    assert.ok(_typeof(Reflex.Task.perform), "function");
    assert.ok(_typeof(Reflex.Task.run), "function");
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QtYXBpLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O01BQ1k7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFWixzQkFBSyxtQkFBTCxFQUEwQixrQkFBVTtBQUNsQyxXQUFPLEVBQVAsU0FBaUIsT0FBTyxJQUFQLENBQWpCLEVBQStCLFVBQS9CLEVBRGtDOztBQUdsQyxXQUFPLEVBQVAsU0FBaUIsT0FBTyxJQUFQLENBQWpCLEVBQStCLFFBQS9CLEVBSGtDO0FBSWxDLFdBQU8sRUFBUCxTQUFpQixPQUFPLElBQVAsQ0FBWSxHQUFaLENBQWpCLEVBQW1DLFVBQW5DLEVBSmtDOztBQU1sQyxXQUFPLEVBQVAsU0FBaUIsT0FBTyxLQUFQLENBQWpCLEVBQWdDLFVBQWhDLEVBTmtDO0FBT2xDLFdBQU8sRUFBUCxTQUFpQixPQUFPLElBQVAsQ0FBakIsRUFBK0IsVUFBL0IsRUFQa0M7QUFRbEMsV0FBTyxFQUFQLFNBQWlCLE9BQU8sT0FBUCxDQUFqQixFQUFrQyxVQUFsQyxFQVJrQzs7QUFVbEMsV0FBTyxFQUFQLFNBQWlCLE9BQU8sV0FBUCxDQUFqQixFQUFzQyxVQUF0QyxFQVZrQzs7QUFhbEMsV0FBTyxFQUFQLFNBQWlCLE9BQU8sSUFBUCxDQUFZLE9BQVosQ0FBakIsRUFBdUMsVUFBdkMsRUFia0M7QUFjbEMsV0FBTyxFQUFQLFNBQWlCLE9BQU8sSUFBUCxDQUFZLElBQVosQ0FBakIsRUFBb0MsVUFBcEMsRUFka0M7QUFlbEMsV0FBTyxFQUFQLFNBQWlCLE9BQU8sSUFBUCxDQUFZLEVBQVosQ0FBakIsRUFBa0MsVUFBbEMsRUFma0M7QUFnQmxDLFdBQU8sRUFBUCxTQUFpQixPQUFPLElBQVAsQ0FBWSxTQUFaLENBQWpCLEVBQXlDLFVBQXpDLEVBaEJrQztBQWlCbEMsV0FBTyxFQUFQLFNBQWlCLE9BQU8sSUFBUCxDQUFZLFNBQVosQ0FBakIsRUFBeUMsVUFBekMsRUFqQmtDO0FBa0JsQyxXQUFPLEVBQVAsU0FBaUIsT0FBTyxJQUFQLENBQVksT0FBWixDQUFqQixFQUF1QyxVQUF2QyxFQWxCa0M7QUFtQmxDLFdBQU8sRUFBUCxTQUFpQixPQUFPLElBQVAsQ0FBWSxHQUFaLENBQWpCLEVBQW1DLFVBQW5DLEVBbkJrQztHQUFWLENBQTFCIiwiZmlsZSI6InRlc3QtYXBpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRlc3QgZnJvbSBcIi4vdGVzdFwiXG5pbXBvcnQgKiBhcyBSZWZsZXggZnJvbSBcIi4uL1wiXG5cbnRlc3QoXCJ0ZXN0IGV4cG9ydGVkIGFwaVwiLCBhc3NlcnQgPT4ge1xuICBhc3NlcnQub2sodHlwZW9mKFJlZmxleC5ub2RlKSwgXCJmdW5jdGlvblwiKVxuXG4gIGFzc2VydC5vayh0eXBlb2YoUmVmbGV4Lmh0bWwpLCBcIm9iamVjdFwiKVxuICBhc3NlcnQub2sodHlwZW9mKFJlZmxleC5odG1sLmRpdiksIFwiZnVuY3Rpb25cIilcblxuICBhc3NlcnQub2sodHlwZW9mKFJlZmxleC50aHVuayksIFwiZnVuY3Rpb25cIilcbiAgYXNzZXJ0Lm9rKHR5cGVvZihSZWZsZXguc2VuZCksIFwiZnVuY3Rpb25cIilcbiAgYXNzZXJ0Lm9rKHR5cGVvZihSZWZsZXguZm9yd2FyZCksIFwiZnVuY3Rpb25cIilcblxuICBhc3NlcnQub2sodHlwZW9mKFJlZmxleC5BcHBsaWNhdGlvbiksIFwiZnVuY3Rpb25cIilcblxuXG4gIGFzc2VydC5vayh0eXBlb2YoUmVmbGV4LlRhc2suc3VjY2VlZCksIFwiZnVuY3Rpb25cIilcbiAgYXNzZXJ0Lm9rKHR5cGVvZihSZWZsZXguVGFzay5mYWlsKSwgXCJmdW5jdGlvblwiKVxuICBhc3NlcnQub2sodHlwZW9mKFJlZmxleC5UYXNrLmlvKSwgXCJmdW5jdGlvblwiKVxuICBhc3NlcnQub2sodHlwZW9mKFJlZmxleC5UYXNrLm9uU3VjY2VzcyksIFwiZnVuY3Rpb25cIilcbiAgYXNzZXJ0Lm9rKHR5cGVvZihSZWZsZXguVGFzay5vbkZhaWx1cmUpLCBcImZ1bmN0aW9uXCIpXG4gIGFzc2VydC5vayh0eXBlb2YoUmVmbGV4LlRhc2sucGVyZm9ybSksIFwiZnVuY3Rpb25cIilcbiAgYXNzZXJ0Lm9rKHR5cGVvZihSZWZsZXguVGFzay5ydW4pLCBcImZ1bmN0aW9uXCIpXG59KVxuIl19
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "tape"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("tape"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.tape);
    global.test = mod.exports;
  }
})(this, function (exports, _tape) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var tape = _interopRequireWildcard(_tape);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  exports.default = function (description, unit) {
    return tape.test(description, function (test) {
      var result = unit(test);
      if (result && result.then) {
        result.then(function (_) {
          return test.end();
        }, function (error) {
          return test.end(error || true);
        });
      } else {
        test.end();
      }
    });
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQUFZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUVHLFVBQUMsV0FBRCxFQUFjLElBQWQ7V0FBdUIsS0FBSyxJQUFMLENBQVUsV0FBVixFQUF1QixnQkFBUTtBQUNuRSxVQUFJLFNBQVMsS0FBSyxJQUFMLENBQVQsQ0FEK0Q7QUFFbkUsVUFBSSxVQUFVLE9BQU8sSUFBUCxFQUFhO0FBQ3pCLGVBQU8sSUFBUCxDQUFZO2lCQUFLLEtBQUssR0FBTDtTQUFMLEVBQWlCO2lCQUFTLEtBQUssR0FBTCxDQUFTLFNBQVMsSUFBVDtTQUFsQixDQUE3QixDQUR5QjtPQUEzQixNQUVPO0FBQ0wsYUFBSyxHQUFMLEdBREs7T0FGUDtLQUYyRDtHQUE5QyIsImZpbGUiOiJ0ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdGFwZSBmcm9tIFwidGFwZVwiXG5cbmV4cG9ydCBkZWZhdWx0IChkZXNjcmlwdGlvbiwgdW5pdCkgPT4gdGFwZS50ZXN0KGRlc2NyaXB0aW9uLCB0ZXN0ID0+IHtcbiAgdmFyIHJlc3VsdCA9IHVuaXQodGVzdClcbiAgaWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikge1xuICAgIHJlc3VsdC50aGVuKF8gPT4gdGVzdC5lbmQoKSwgZXJyb3IgPT4gdGVzdC5lbmQoZXJyb3IgfHwgdHJ1ZSkpXG4gIH0gZWxzZSB7XG4gICAgdGVzdC5lbmQoKVxuICB9XG59KVxuIl19
